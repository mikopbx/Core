"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalDebugMode, EventSource */

/**
 * The connectionCheckWorker object is responsible for checking
 * the connection status with backend
 *
 * @module connectionCheckWorker
 */
var connectionCheckWorker = {
  // Counter for error counts
  errorCounts: 0,

  /**
   * jQuery object for the no connection dimmer element.
   * @type {jQuery}
   */
  $connectionDimmer: $('#connection-dimmer'),

  /**
   * EventSource object for the connection check.
   * @type {EventSource}
   */
  eventSource: null,

  /**
   * Initialize the connection check worker.
   */
  initialize: function initialize() {
    connectionCheckWorker.eventSource = new EventSource('/connection-check');
    connectionCheckWorker.eventSource.addEventListener('error', function (event) {
      connectionCheckWorker.cbAfterResponse(false);
    });
    connectionCheckWorker.eventSource.addEventListener('open', function (event) {
      connectionCheckWorker.cbAfterResponse(true);
    });
  },

  /**
   * Callback function after receiving the response from the connection check.
   * @param {boolean} result - The result of the connection check.
   */
  cbAfterResponse: function cbAfterResponse(result) {
    if (result === true) {
      // If the connection is successful, hide the connection dimmer
      connectionCheckWorker.$connectionDimmer.dimmer('hide'); // Reload the page if the error count exceeds a certain threshold

      if (connectionCheckWorker.errorCounts > 5) {
        window.location.reload();
      } // Reset the error count


      connectionCheckWorker.errorCounts = 0;
    } else if (connectionCheckWorker.errorCounts > 3) {
      // If the connection is unsuccessful and error count exceeds a threshold, show the connection dimmer
      connectionCheckWorker.$connectionDimmer.dimmer('show'); // Increment the error count

      connectionCheckWorker.errorCounts += 1;
    } else {
      // Increment the error count
      connectionCheckWorker.errorCounts += 1;
    }
  }
}; // When the document is ready, initialize the connection check worker

$(document).ready(function () {
  if (!globalDebugMode) {
    connectionCheckWorker.initialize();
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYWluL2Nvbm5lY3Rpb24tY2hlY2std29ya2VyLmpzIl0sIm5hbWVzIjpbImNvbm5lY3Rpb25DaGVja1dvcmtlciIsImVycm9yQ291bnRzIiwiJGNvbm5lY3Rpb25EaW1tZXIiLCIkIiwiZXZlbnRTb3VyY2UiLCJpbml0aWFsaXplIiwiRXZlbnRTb3VyY2UiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJjYkFmdGVyUmVzcG9uc2UiLCJyZXN1bHQiLCJkaW1tZXIiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlbG9hZCIsImRvY3VtZW50IiwicmVhZHkiLCJnbG9iYWxEZWJ1Z01vZGUiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxxQkFBcUIsR0FBRztBQUUxQjtBQUNBQyxFQUFBQSxXQUFXLEVBQUUsQ0FIYTs7QUFLMUI7QUFDSjtBQUNBO0FBQ0E7QUFDSUMsRUFBQUEsaUJBQWlCLEVBQUVDLENBQUMsQ0FBQyxvQkFBRCxDQVRNOztBQVcxQjtBQUNKO0FBQ0E7QUFDQTtBQUNJQyxFQUFBQSxXQUFXLEVBQUUsSUFmYTs7QUFpQjFCO0FBQ0o7QUFDQTtBQUNJQyxFQUFBQSxVQXBCMEIsd0JBb0JiO0FBQ1RMLElBQUFBLHFCQUFxQixDQUFDSSxXQUF0QixHQUFvQyxJQUFJRSxXQUFKLENBQWdCLG1CQUFoQixDQUFwQztBQUVBTixJQUFBQSxxQkFBcUIsQ0FBQ0ksV0FBdEIsQ0FBa0NHLGdCQUFsQyxDQUFtRCxPQUFuRCxFQUE0RCxVQUFTQyxLQUFULEVBQWdCO0FBQ3hFUixNQUFBQSxxQkFBcUIsQ0FBQ1MsZUFBdEIsQ0FBc0MsS0FBdEM7QUFDSCxLQUZEO0FBSUFULElBQUFBLHFCQUFxQixDQUFDSSxXQUF0QixDQUFrQ0csZ0JBQWxDLENBQW1ELE1BQW5ELEVBQTJELFVBQVNDLEtBQVQsRUFBZ0I7QUFDdkVSLE1BQUFBLHFCQUFxQixDQUFDUyxlQUF0QixDQUFzQyxJQUF0QztBQUNILEtBRkQ7QUFHSCxHQTlCeUI7O0FBZ0MxQjtBQUNKO0FBQ0E7QUFDQTtBQUNJQSxFQUFBQSxlQXBDMEIsMkJBb0NWQyxNQXBDVSxFQW9DRjtBQUNwQixRQUFJQSxNQUFNLEtBQUssSUFBZixFQUFxQjtBQUNqQjtBQUNBVixNQUFBQSxxQkFBcUIsQ0FBQ0UsaUJBQXRCLENBQXdDUyxNQUF4QyxDQUErQyxNQUEvQyxFQUZpQixDQUlqQjs7QUFDQSxVQUFJWCxxQkFBcUIsQ0FBQ0MsV0FBdEIsR0FBb0MsQ0FBeEMsRUFBMkM7QUFDdkNXLFFBQUFBLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkMsTUFBaEI7QUFDSCxPQVBnQixDQVNqQjs7O0FBQ0FkLE1BQUFBLHFCQUFxQixDQUFDQyxXQUF0QixHQUFvQyxDQUFwQztBQUVILEtBWkQsTUFZTyxJQUFJRCxxQkFBcUIsQ0FBQ0MsV0FBdEIsR0FBb0MsQ0FBeEMsRUFBMkM7QUFFOUM7QUFDQUQsTUFBQUEscUJBQXFCLENBQUNFLGlCQUF0QixDQUF3Q1MsTUFBeEMsQ0FBK0MsTUFBL0MsRUFIOEMsQ0FLOUM7O0FBQ0FYLE1BQUFBLHFCQUFxQixDQUFDQyxXQUF0QixJQUFxQyxDQUFyQztBQUNILEtBUE0sTUFPQTtBQUVIO0FBQ0FELE1BQUFBLHFCQUFxQixDQUFDQyxXQUF0QixJQUFxQyxDQUFyQztBQUNIO0FBQ0o7QUE3RHlCLENBQTlCLEMsQ0FnRUE7O0FBQ0FFLENBQUMsQ0FBQ1ksUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUNwQixNQUFJLENBQUNDLGVBQUwsRUFBc0I7QUFDbEJqQixJQUFBQSxxQkFBcUIsQ0FBQ0ssVUFBdEI7QUFDSDtBQUNKLENBSkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IMKpIDIwMTctMjAyMyBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgZ2xvYmFsRGVidWdNb2RlLCBFdmVudFNvdXJjZSAqL1xuXG4vKipcbiAqIFRoZSBjb25uZWN0aW9uQ2hlY2tXb3JrZXIgb2JqZWN0IGlzIHJlc3BvbnNpYmxlIGZvciBjaGVja2luZ1xuICogdGhlIGNvbm5lY3Rpb24gc3RhdHVzIHdpdGggYmFja2VuZFxuICpcbiAqIEBtb2R1bGUgY29ubmVjdGlvbkNoZWNrV29ya2VyXG4gKi9cbmNvbnN0IGNvbm5lY3Rpb25DaGVja1dvcmtlciA9IHtcblxuICAgIC8vIENvdW50ZXIgZm9yIGVycm9yIGNvdW50c1xuICAgIGVycm9yQ291bnRzOiAwLFxuXG4gICAgLyoqXG4gICAgICogalF1ZXJ5IG9iamVjdCBmb3IgdGhlIG5vIGNvbm5lY3Rpb24gZGltbWVyIGVsZW1lbnQuXG4gICAgICogQHR5cGUge2pRdWVyeX1cbiAgICAgKi9cbiAgICAkY29ubmVjdGlvbkRpbW1lcjogJCgnI2Nvbm5lY3Rpb24tZGltbWVyJyksXG5cbiAgICAvKipcbiAgICAgKiBFdmVudFNvdXJjZSBvYmplY3QgZm9yIHRoZSBjb25uZWN0aW9uIGNoZWNrLlxuICAgICAqIEB0eXBlIHtFdmVudFNvdXJjZX1cbiAgICAgKi9cbiAgICBldmVudFNvdXJjZTogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhlIGNvbm5lY3Rpb24gY2hlY2sgd29ya2VyLlxuICAgICAqL1xuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIGNvbm5lY3Rpb25DaGVja1dvcmtlci5ldmVudFNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL2Nvbm5lY3Rpb24tY2hlY2snKTtcblxuICAgICAgICBjb25uZWN0aW9uQ2hlY2tXb3JrZXIuZXZlbnRTb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgY29ubmVjdGlvbkNoZWNrV29ya2VyLmNiQWZ0ZXJSZXNwb25zZShmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbm5lY3Rpb25DaGVja1dvcmtlci5ldmVudFNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb25DaGVja1dvcmtlci5jYkFmdGVyUmVzcG9uc2UodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBmdW5jdGlvbiBhZnRlciByZWNlaXZpbmcgdGhlIHJlc3BvbnNlIGZyb20gdGhlIGNvbm5lY3Rpb24gY2hlY2suXG4gICAgICogQHBhcmFtIHtib29sZWFufSByZXN1bHQgLSBUaGUgcmVzdWx0IG9mIHRoZSBjb25uZWN0aW9uIGNoZWNrLlxuICAgICAqL1xuICAgIGNiQWZ0ZXJSZXNwb25zZShyZXN1bHQpIHtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGNvbm5lY3Rpb24gaXMgc3VjY2Vzc2Z1bCwgaGlkZSB0aGUgY29ubmVjdGlvbiBkaW1tZXJcbiAgICAgICAgICAgIGNvbm5lY3Rpb25DaGVja1dvcmtlci4kY29ubmVjdGlvbkRpbW1lci5kaW1tZXIoJ2hpZGUnKTtcblxuICAgICAgICAgICAgLy8gUmVsb2FkIHRoZSBwYWdlIGlmIHRoZSBlcnJvciBjb3VudCBleGNlZWRzIGEgY2VydGFpbiB0aHJlc2hvbGRcbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgPiA1KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXNldCB0aGUgZXJyb3IgY291bnRcbiAgICAgICAgICAgIGNvbm5lY3Rpb25DaGVja1dvcmtlci5lcnJvckNvdW50cyA9IDA7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb25uZWN0aW9uQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgPiAzKSB7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBjb25uZWN0aW9uIGlzIHVuc3VjY2Vzc2Z1bCBhbmQgZXJyb3IgY291bnQgZXhjZWVkcyBhIHRocmVzaG9sZCwgc2hvdyB0aGUgY29ubmVjdGlvbiBkaW1tZXJcbiAgICAgICAgICAgIGNvbm5lY3Rpb25DaGVja1dvcmtlci4kY29ubmVjdGlvbkRpbW1lci5kaW1tZXIoJ3Nob3cnKTtcblxuICAgICAgICAgICAgLy8gSW5jcmVtZW50IHRoZSBlcnJvciBjb3VudFxuICAgICAgICAgICAgY29ubmVjdGlvbkNoZWNrV29ya2VyLmVycm9yQ291bnRzICs9IDE7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIC8vIEluY3JlbWVudCB0aGUgZXJyb3IgY291bnRcbiAgICAgICAgICAgIGNvbm5lY3Rpb25DaGVja1dvcmtlci5lcnJvckNvdW50cyArPSAxO1xuICAgICAgICB9XG4gICAgfSxcbn07XG5cbi8vIFdoZW4gdGhlIGRvY3VtZW50IGlzIHJlYWR5LCBpbml0aWFsaXplIHRoZSBjb25uZWN0aW9uIGNoZWNrIHdvcmtlclxuJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xuICAgIGlmICghZ2xvYmFsRGVidWdNb2RlKSB7XG4gICAgICAgIGNvbm5lY3Rpb25DaGVja1dvcmtlci5pbml0aWFsaXplKCk7XG4gICAgfVxufSk7XG4iXX0=