"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalTranslate,  PbxApi */
var mergingCheckWorker = {
  timeOut: 3000,
  timeOutHandle: '',
  errorCounts: 0,
  fileID: null,
  filePath: '',
  initialize: function () {
    function initialize(fileID, filePath) {
      // Запустим обновление статуса провайдера
      mergingCheckWorker.fileID = fileID;
      mergingCheckWorker.filePath = filePath;
      mergingCheckWorker.restartWorker(fileID);
    }

    return initialize;
  }(),
  restartWorker: function () {
    function restartWorker() {
      window.clearTimeout(mergingCheckWorker.timeoutHandle);
      mergingCheckWorker.worker();
    }

    return restartWorker;
  }(),
  worker: function () {
    function worker() {
      PbxApi.FilesGetStatusUploadFile(mergingCheckWorker.fileID, mergingCheckWorker.cbAfterResponse);
      mergingCheckWorker.timeoutHandle = window.setTimeout(mergingCheckWorker.worker, mergingCheckWorker.timeOut);
    }

    return worker;
  }(),
  cbAfterResponse: function () {
    function cbAfterResponse(response) {
      if (mergingCheckWorker.errorCounts > 10) {
        UserMessage.showMultiString(globalTranslate.sf_UploadError);
        soundFileModify.$submitButton.removeClass('loading');
        soundFileModify.$formObj.removeClass('loading');
        window.clearTimeout(mergingCheckWorker.timeoutHandle);
      }

      if (response === undefined || Object.keys(response).length === 0) {
        mergingCheckWorker.errorCounts += 1;
        return;
      }

      if (response.d_status === 'UPLOAD_COMPLETE') {
        var category = soundFileModify.$formObj.form('get value', 'category');
        PbxApi.SystemConvertAudioFile(mergingCheckWorker.filePath, category, soundFileModify.cbAfterConvertFile);
        window.clearTimeout(mergingCheckWorker.timeoutHandle);
      } else if (response.d_status !== undefined) {
        mergingCheckWorker.errorCounts = 0;
      } else {
        mergingCheckWorker.errorCounts += 1;
      }
    }

    return cbAfterResponse;
  }()
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Tb3VuZEZpbGVzL3NvdW5kLWZpbGUtbW9kaWZ5LXVwbG9hZC13b3JrZXIuanMiXSwibmFtZXMiOlsibWVyZ2luZ0NoZWNrV29ya2VyIiwidGltZU91dCIsInRpbWVPdXRIYW5kbGUiLCJlcnJvckNvdW50cyIsImZpbGVJRCIsImZpbGVQYXRoIiwiaW5pdGlhbGl6ZSIsInJlc3RhcnRXb3JrZXIiLCJ3aW5kb3ciLCJjbGVhclRpbWVvdXQiLCJ0aW1lb3V0SGFuZGxlIiwid29ya2VyIiwiUGJ4QXBpIiwiRmlsZXNHZXRTdGF0dXNVcGxvYWRGaWxlIiwiY2JBZnRlclJlc3BvbnNlIiwic2V0VGltZW91dCIsInJlc3BvbnNlIiwiVXNlck1lc3NhZ2UiLCJzaG93TXVsdGlTdHJpbmciLCJnbG9iYWxUcmFuc2xhdGUiLCJzZl9VcGxvYWRFcnJvciIsInNvdW5kRmlsZU1vZGlmeSIsIiRzdWJtaXRCdXR0b24iLCJyZW1vdmVDbGFzcyIsIiRmb3JtT2JqIiwidW5kZWZpbmVkIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImRfc3RhdHVzIiwiY2F0ZWdvcnkiLCJmb3JtIiwiU3lzdGVtQ29udmVydEF1ZGlvRmlsZSIsImNiQWZ0ZXJDb252ZXJ0RmlsZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBO0FBRUEsSUFBTUEsa0JBQWtCLEdBQUc7QUFDMUJDLEVBQUFBLE9BQU8sRUFBRSxJQURpQjtBQUUxQkMsRUFBQUEsYUFBYSxFQUFFLEVBRlc7QUFHMUJDLEVBQUFBLFdBQVcsRUFBRSxDQUhhO0FBSTFCQyxFQUFBQSxNQUFNLEVBQUUsSUFKa0I7QUFLMUJDLEVBQUFBLFFBQVEsRUFBRSxFQUxnQjtBQU0xQkMsRUFBQUEsVUFOMEI7QUFBQSx3QkFNZkYsTUFOZSxFQU1QQyxRQU5PLEVBTUc7QUFDNUI7QUFDQUwsTUFBQUEsa0JBQWtCLENBQUNJLE1BQW5CLEdBQTRCQSxNQUE1QjtBQUNBSixNQUFBQSxrQkFBa0IsQ0FBQ0ssUUFBbkIsR0FBOEJBLFFBQTlCO0FBQ0FMLE1BQUFBLGtCQUFrQixDQUFDTyxhQUFuQixDQUFpQ0gsTUFBakM7QUFDQTs7QUFYeUI7QUFBQTtBQVkxQkcsRUFBQUEsYUFaMEI7QUFBQSw2QkFZVjtBQUNmQyxNQUFBQSxNQUFNLENBQUNDLFlBQVAsQ0FBb0JULGtCQUFrQixDQUFDVSxhQUF2QztBQUNBVixNQUFBQSxrQkFBa0IsQ0FBQ1csTUFBbkI7QUFDQTs7QUFmeUI7QUFBQTtBQWdCMUJBLEVBQUFBLE1BaEIwQjtBQUFBLHNCQWdCakI7QUFDUkMsTUFBQUEsTUFBTSxDQUFDQyx3QkFBUCxDQUFnQ2Isa0JBQWtCLENBQUNJLE1BQW5ELEVBQTJESixrQkFBa0IsQ0FBQ2MsZUFBOUU7QUFDQWQsTUFBQUEsa0JBQWtCLENBQUNVLGFBQW5CLEdBQW1DRixNQUFNLENBQUNPLFVBQVAsQ0FDbENmLGtCQUFrQixDQUFDVyxNQURlLEVBRWxDWCxrQkFBa0IsQ0FBQ0MsT0FGZSxDQUFuQztBQUlBOztBQXRCeUI7QUFBQTtBQXVCMUJhLEVBQUFBLGVBdkIwQjtBQUFBLDZCQXVCVkUsUUF2QlUsRUF1QkE7QUFDekIsVUFBSWhCLGtCQUFrQixDQUFDRyxXQUFuQixHQUFpQyxFQUFyQyxFQUF5QztBQUN4Q2MsUUFBQUEsV0FBVyxDQUFDQyxlQUFaLENBQTRCQyxlQUFlLENBQUNDLGNBQTVDO0FBQ0FDLFFBQUFBLGVBQWUsQ0FBQ0MsYUFBaEIsQ0FBOEJDLFdBQTlCLENBQTBDLFNBQTFDO0FBQ0FGLFFBQUFBLGVBQWUsQ0FBQ0csUUFBaEIsQ0FBeUJELFdBQXpCLENBQXFDLFNBQXJDO0FBQ0FmLFFBQUFBLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQlQsa0JBQWtCLENBQUNVLGFBQXZDO0FBQ0E7O0FBQ0QsVUFBSU0sUUFBUSxLQUFLUyxTQUFiLElBQTBCQyxNQUFNLENBQUNDLElBQVAsQ0FBWVgsUUFBWixFQUFzQlksTUFBdEIsS0FBaUMsQ0FBL0QsRUFBa0U7QUFDakU1QixRQUFBQSxrQkFBa0IsQ0FBQ0csV0FBbkIsSUFBa0MsQ0FBbEM7QUFDQTtBQUNBOztBQUNELFVBQUlhLFFBQVEsQ0FBQ2EsUUFBVCxLQUFzQixpQkFBMUIsRUFBNkM7QUFDNUMsWUFBTUMsUUFBUSxHQUFHVCxlQUFlLENBQUNHLFFBQWhCLENBQXlCTyxJQUF6QixDQUE4QixXQUE5QixFQUEyQyxVQUEzQyxDQUFqQjtBQUNBbkIsUUFBQUEsTUFBTSxDQUFDb0Isc0JBQVAsQ0FBOEJoQyxrQkFBa0IsQ0FBQ0ssUUFBakQsRUFBMkR5QixRQUEzRCxFQUFxRVQsZUFBZSxDQUFDWSxrQkFBckY7QUFDQXpCLFFBQUFBLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQlQsa0JBQWtCLENBQUNVLGFBQXZDO0FBQ0EsT0FKRCxNQUlPLElBQUlNLFFBQVEsQ0FBQ2EsUUFBVCxLQUFzQkosU0FBMUIsRUFBcUM7QUFDM0N6QixRQUFBQSxrQkFBa0IsQ0FBQ0csV0FBbkIsR0FBaUMsQ0FBakM7QUFDQSxPQUZNLE1BRUE7QUFDTkgsUUFBQUEsa0JBQWtCLENBQUNHLFdBQW5CLElBQWtDLENBQWxDO0FBQ0E7QUFDRDs7QUEzQ3lCO0FBQUE7QUFBQSxDQUEzQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaWtvUEJYIC0gZnJlZSBwaG9uZSBzeXN0ZW0gZm9yIHNtYWxsIGJ1c2luZXNzXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTctMjAyMCBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuLyogZ2xvYmFsIGdsb2JhbFRyYW5zbGF0ZSwgIFBieEFwaSAqL1xuXG5jb25zdCBtZXJnaW5nQ2hlY2tXb3JrZXIgPSB7XG5cdHRpbWVPdXQ6IDMwMDAsXG5cdHRpbWVPdXRIYW5kbGU6ICcnLFxuXHRlcnJvckNvdW50czogMCxcblx0ZmlsZUlEOiBudWxsLFxuXHRmaWxlUGF0aDogJycsXG5cdGluaXRpYWxpemUoZmlsZUlELCBmaWxlUGF0aCkge1xuXHRcdC8vINCX0LDQv9GD0YHRgtC40Lwg0L7QsdC90L7QstC70LXQvdC40LUg0YHRgtCw0YLRg9GB0LAg0L/RgNC+0LLQsNC50LTQtdGA0LBcblx0XHRtZXJnaW5nQ2hlY2tXb3JrZXIuZmlsZUlEID0gZmlsZUlEO1xuXHRcdG1lcmdpbmdDaGVja1dvcmtlci5maWxlUGF0aCA9IGZpbGVQYXRoO1xuXHRcdG1lcmdpbmdDaGVja1dvcmtlci5yZXN0YXJ0V29ya2VyKGZpbGVJRCk7XG5cdH0sXG5cdHJlc3RhcnRXb3JrZXIoKSB7XG5cdFx0d2luZG93LmNsZWFyVGltZW91dChtZXJnaW5nQ2hlY2tXb3JrZXIudGltZW91dEhhbmRsZSk7XG5cdFx0bWVyZ2luZ0NoZWNrV29ya2VyLndvcmtlcigpO1xuXHR9LFxuXHR3b3JrZXIoKSB7XG5cdFx0UGJ4QXBpLkZpbGVzR2V0U3RhdHVzVXBsb2FkRmlsZShtZXJnaW5nQ2hlY2tXb3JrZXIuZmlsZUlELCBtZXJnaW5nQ2hlY2tXb3JrZXIuY2JBZnRlclJlc3BvbnNlKTtcblx0XHRtZXJnaW5nQ2hlY2tXb3JrZXIudGltZW91dEhhbmRsZSA9IHdpbmRvdy5zZXRUaW1lb3V0KFxuXHRcdFx0bWVyZ2luZ0NoZWNrV29ya2VyLndvcmtlcixcblx0XHRcdG1lcmdpbmdDaGVja1dvcmtlci50aW1lT3V0LFxuXHRcdCk7XG5cdH0sXG5cdGNiQWZ0ZXJSZXNwb25zZShyZXNwb25zZSkge1xuXHRcdGlmIChtZXJnaW5nQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgPiAxMCkge1xuXHRcdFx0VXNlck1lc3NhZ2Uuc2hvd011bHRpU3RyaW5nKGdsb2JhbFRyYW5zbGF0ZS5zZl9VcGxvYWRFcnJvcik7XG5cdFx0XHRzb3VuZEZpbGVNb2RpZnkuJHN1Ym1pdEJ1dHRvbi5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xuXHRcdFx0c291bmRGaWxlTW9kaWZ5LiRmb3JtT2JqLnJlbW92ZUNsYXNzKCdsb2FkaW5nJyk7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KG1lcmdpbmdDaGVja1dvcmtlci50aW1lb3V0SGFuZGxlKTtcblx0XHR9XG5cdFx0aWYgKHJlc3BvbnNlID09PSB1bmRlZmluZWQgfHwgT2JqZWN0LmtleXMocmVzcG9uc2UpLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0bWVyZ2luZ0NoZWNrV29ya2VyLmVycm9yQ291bnRzICs9IDE7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmIChyZXNwb25zZS5kX3N0YXR1cyA9PT0gJ1VQTE9BRF9DT01QTEVURScpIHtcblx0XHRcdGNvbnN0IGNhdGVnb3J5ID0gc291bmRGaWxlTW9kaWZ5LiRmb3JtT2JqLmZvcm0oJ2dldCB2YWx1ZScsICdjYXRlZ29yeScpO1xuXHRcdFx0UGJ4QXBpLlN5c3RlbUNvbnZlcnRBdWRpb0ZpbGUobWVyZ2luZ0NoZWNrV29ya2VyLmZpbGVQYXRoLCBjYXRlZ29yeSwgc291bmRGaWxlTW9kaWZ5LmNiQWZ0ZXJDb252ZXJ0RmlsZSk7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KG1lcmdpbmdDaGVja1dvcmtlci50aW1lb3V0SGFuZGxlKTtcblx0XHR9IGVsc2UgaWYgKHJlc3BvbnNlLmRfc3RhdHVzICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdG1lcmdpbmdDaGVja1dvcmtlci5lcnJvckNvdW50cyA9IDA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lcmdpbmdDaGVja1dvcmtlci5lcnJvckNvdW50cyArPSAxO1xuXHRcdH1cblx0fSxcbn07XG4iXX0=