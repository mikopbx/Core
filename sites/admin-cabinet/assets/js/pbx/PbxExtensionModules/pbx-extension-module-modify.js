"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, Form, globalTranslate */

/**
 * Process common module settings
 *
 */
var pbxExtensionModuleModify = {
  $formObj: $('#pbx-extension-modify-form'),
  $backButton: $('#back-to-list-button'),
  $dropdown: $('#menu-group'),
  validateRules: {
    name: {
      identifier: 'caption',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.ext_ValidateCaptionEmpty
      }]
    }
  },
  initialize: function initialize() {
    $('#menu-group').dropdown();
    pbxExtensionModuleModify.initializeForm();
  },
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = pbxExtensionModuleModify.$formObj.form('get values');
    return result;
  },
  cbAfterSendForm: function cbAfterSendForm() {
    window.location = window.location.href;
  },
  initializeForm: function initializeForm() {
    Form.$formObj = pbxExtensionModuleModify.$formObj;
    Form.url = "".concat(globalRootUrl, "pbx-extension-modules/saveModuleSettings");
    Form.validateRules = pbxExtensionModuleModify.validateRules;
    Form.cbBeforeSendForm = pbxExtensionModuleModify.cbBeforeSendForm;
    Form.cbAfterSendForm = pbxExtensionModuleModify.cbAfterSendForm;
    Form.initialize();
  }
};
$(document).ready(function () {
  pbxExtensionModuleModify.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QYnhFeHRlbnNpb25Nb2R1bGVzL3BieC1leHRlbnNpb24tbW9kdWxlLW1vZGlmeS5qcyJdLCJuYW1lcyI6WyJwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnkiLCIkZm9ybU9iaiIsIiQiLCIkYmFja0J1dHRvbiIsIiRkcm9wZG93biIsInZhbGlkYXRlUnVsZXMiLCJuYW1lIiwiaWRlbnRpZmllciIsInJ1bGVzIiwidHlwZSIsInByb21wdCIsImdsb2JhbFRyYW5zbGF0ZSIsImV4dF9WYWxpZGF0ZUNhcHRpb25FbXB0eSIsImluaXRpYWxpemUiLCJkcm9wZG93biIsImluaXRpYWxpemVGb3JtIiwiY2JCZWZvcmVTZW5kRm9ybSIsInNldHRpbmdzIiwicmVzdWx0IiwiZGF0YSIsImZvcm0iLCJjYkFmdGVyU2VuZEZvcm0iLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJGb3JtIiwidXJsIiwiZ2xvYmFsUm9vdFVybCIsImRvY3VtZW50IiwicmVhZHkiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLHdCQUF3QixHQUFHO0FBQ2hDQyxFQUFBQSxRQUFRLEVBQUVDLENBQUMsQ0FBQyw0QkFBRCxDQURxQjtBQUVoQ0MsRUFBQUEsV0FBVyxFQUFFRCxDQUFDLENBQUMsc0JBQUQsQ0FGa0I7QUFHaENFLEVBQUFBLFNBQVMsRUFBRUYsQ0FBQyxDQUFDLGFBQUQsQ0FIb0I7QUFJaENHLEVBQUFBLGFBQWEsRUFBRTtBQUNkQyxJQUFBQSxJQUFJLEVBQUU7QUFDTEMsTUFBQUEsVUFBVSxFQUFFLFNBRFA7QUFFTEMsTUFBQUEsS0FBSyxFQUFFLENBQ047QUFDQ0MsUUFBQUEsSUFBSSxFQUFFLE9BRFA7QUFFQ0MsUUFBQUEsTUFBTSxFQUFFQyxlQUFlLENBQUNDO0FBRnpCLE9BRE07QUFGRjtBQURRLEdBSmlCO0FBZWhDQyxFQUFBQSxVQWZnQyx3QkFlbkI7QUFDWlgsSUFBQUEsQ0FBQyxDQUFDLGFBQUQsQ0FBRCxDQUFpQlksUUFBakI7QUFDQWQsSUFBQUEsd0JBQXdCLENBQUNlLGNBQXpCO0FBQ0EsR0FsQitCO0FBbUJoQ0MsRUFBQUEsZ0JBbkJnQyw0QkFtQmZDLFFBbkJlLEVBbUJMO0FBQzFCLFFBQU1DLE1BQU0sR0FBR0QsUUFBZjtBQUNBQyxJQUFBQSxNQUFNLENBQUNDLElBQVAsR0FBY25CLHdCQUF3QixDQUFDQyxRQUF6QixDQUFrQ21CLElBQWxDLENBQXVDLFlBQXZDLENBQWQ7QUFDQSxXQUFPRixNQUFQO0FBQ0EsR0F2QitCO0FBd0JoQ0csRUFBQUEsZUF4QmdDLDZCQXdCZDtBQUNqQkMsSUFBQUEsTUFBTSxDQUFDQyxRQUFQLEdBQWtCRCxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JDLElBQWxDO0FBQ0EsR0ExQitCO0FBMkJoQ1QsRUFBQUEsY0EzQmdDLDRCQTJCZjtBQUNoQlUsSUFBQUEsSUFBSSxDQUFDeEIsUUFBTCxHQUFnQkQsd0JBQXdCLENBQUNDLFFBQXpDO0FBQ0F3QixJQUFBQSxJQUFJLENBQUNDLEdBQUwsYUFBY0MsYUFBZDtBQUNBRixJQUFBQSxJQUFJLENBQUNwQixhQUFMLEdBQXFCTCx3QkFBd0IsQ0FBQ0ssYUFBOUM7QUFDQW9CLElBQUFBLElBQUksQ0FBQ1QsZ0JBQUwsR0FBd0JoQix3QkFBd0IsQ0FBQ2dCLGdCQUFqRDtBQUNBUyxJQUFBQSxJQUFJLENBQUNKLGVBQUwsR0FBdUJyQix3QkFBd0IsQ0FBQ3FCLGVBQWhEO0FBQ0FJLElBQUFBLElBQUksQ0FBQ1osVUFBTDtBQUNBO0FBbEMrQixDQUFqQztBQXNDQVgsQ0FBQyxDQUFDMEIsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUN2QjdCLEVBQUFBLHdCQUF3QixDQUFDYSxVQUF6QjtBQUNBLENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IChDKSAyMDE3LTIwMjAgQWxleGV5IFBvcnRub3YgYW5kIE5pa29sYXkgQmVrZXRvdlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqIElmIG5vdCwgc2VlIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cblxuLyogZ2xvYmFsIGdsb2JhbFJvb3RVcmwsIEZvcm0sIGdsb2JhbFRyYW5zbGF0ZSAqL1xuXG4vKipcbiAqIFByb2Nlc3MgY29tbW9uIG1vZHVsZSBzZXR0aW5nc1xuICpcbiAqL1xuY29uc3QgcGJ4RXh0ZW5zaW9uTW9kdWxlTW9kaWZ5ID0ge1xuXHQkZm9ybU9iajogJCgnI3BieC1leHRlbnNpb24tbW9kaWZ5LWZvcm0nKSxcblx0JGJhY2tCdXR0b246ICQoJyNiYWNrLXRvLWxpc3QtYnV0dG9uJyksXG5cdCRkcm9wZG93bjogJCgnI21lbnUtZ3JvdXAnKSxcblx0dmFsaWRhdGVSdWxlczoge1xuXHRcdG5hbWU6IHtcblx0XHRcdGlkZW50aWZpZXI6ICdjYXB0aW9uJyxcblx0XHRcdHJ1bGVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAnZW1wdHknLFxuXHRcdFx0XHRcdHByb21wdDogZ2xvYmFsVHJhbnNsYXRlLmV4dF9WYWxpZGF0ZUNhcHRpb25FbXB0eSxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0fSxcblx0aW5pdGlhbGl6ZSgpIHtcblx0XHQkKCcjbWVudS1ncm91cCcpLmRyb3Bkb3duKCk7XG5cdFx0cGJ4RXh0ZW5zaW9uTW9kdWxlTW9kaWZ5LmluaXRpYWxpemVGb3JtKCk7XG5cdH0sXG5cdGNiQmVmb3JlU2VuZEZvcm0oc2V0dGluZ3MpIHtcblx0XHRjb25zdCByZXN1bHQgPSBzZXR0aW5ncztcblx0XHRyZXN1bHQuZGF0YSA9IHBieEV4dGVuc2lvbk1vZHVsZU1vZGlmeS4kZm9ybU9iai5mb3JtKCdnZXQgdmFsdWVzJyk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSxcblx0Y2JBZnRlclNlbmRGb3JtKCkge1xuXHRcdHdpbmRvdy5sb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuXHR9LFxuXHRpbml0aWFsaXplRm9ybSgpIHtcblx0XHRGb3JtLiRmb3JtT2JqID0gcGJ4RXh0ZW5zaW9uTW9kdWxlTW9kaWZ5LiRmb3JtT2JqO1xuXHRcdEZvcm0udXJsID0gYCR7Z2xvYmFsUm9vdFVybH1wYngtZXh0ZW5zaW9uLW1vZHVsZXMvc2F2ZU1vZHVsZVNldHRpbmdzYDtcblx0XHRGb3JtLnZhbGlkYXRlUnVsZXMgPSBwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnkudmFsaWRhdGVSdWxlcztcblx0XHRGb3JtLmNiQmVmb3JlU2VuZEZvcm0gPSBwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnkuY2JCZWZvcmVTZW5kRm9ybTtcblx0XHRGb3JtLmNiQWZ0ZXJTZW5kRm9ybSA9IHBieEV4dGVuc2lvbk1vZHVsZU1vZGlmeS5jYkFmdGVyU2VuZEZvcm07XG5cdFx0Rm9ybS5pbml0aWFsaXplKCk7XG5cdH0sXG59O1xuXG5cbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcblx0cGJ4RXh0ZW5zaW9uTW9kdWxlTW9kaWZ5LmluaXRpYWxpemUoKTtcbn0pO1xuIl19