"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, Form, globalTranslate */

/**
 * Process common module settings.
 * @module pbxExtensionModuleModify
 */
var pbxExtensionModuleModify = {
  /**
   * jQuery object for the form.
   * @type {jQuery}
   */
  $formObj: $('#pbx-extension-modify-form'),

  /**
   * jQuery object for the back button.
   * @type {jQuery}
   */
  $backButton: $('#back-to-list-button'),

  /**
   * jQuery object for the dropdown menu.
   * @type {jQuery}
   */
  $dropdownMenuGroups: $('#menu-group'),

  /**
   * Validation rules for the form fields before submission.
   * @type {object}
   */
  validateRules: {
    name: {
      identifier: 'caption',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.ext_ValidateCaptionEmpty
      }]
    }
  },

  /**
   * Initializes the module.
   */
  initialize: function initialize() {
    pbxExtensionModuleModify.$dropdownMenuGroups.dropdown();
    pbxExtensionModuleModify.initializeForm();
  },

  /**
   * Callback function to be called before the form is sent
   * @param {Object} settings - The current settings of the form
   * @returns {Object} - The updated settings of the form
   */
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = pbxExtensionModuleModify.$formObj.form('get values');
    return result;
  },

  /**
   * Callback function to be called after the form has been sent.
   * @param {Object} response - The response from the server after the form is sent
   */
  cbAfterSendForm: function cbAfterSendForm(response) {
    window.location = window.location.href;
  },

  /**
   * Initialize the form with custom settings
   */
  initializeForm: function initializeForm() {
    Form.$formObj = pbxExtensionModuleModify.$formObj;
    Form.url = "".concat(globalRootUrl, "pbx-extension-modules/save"); // Form submission URL

    Form.validateRules = pbxExtensionModuleModify.validateRules; // Form validation rules

    Form.cbBeforeSendForm = pbxExtensionModuleModify.cbBeforeSendForm; // Callback before form is sent

    Form.cbAfterSendForm = pbxExtensionModuleModify.cbAfterSendForm; // Callback after form is sent

    Form.initialize();
  }
}; // When the document is ready, initialize the external module management form.

$(document).ready(function () {
  pbxExtensionModuleModify.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QYnhFeHRlbnNpb25Nb2R1bGVzL3BieC1leHRlbnNpb24tbW9kdWxlLW1vZGlmeS5qcyJdLCJuYW1lcyI6WyJwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnkiLCIkZm9ybU9iaiIsIiQiLCIkYmFja0J1dHRvbiIsIiRkcm9wZG93bk1lbnVHcm91cHMiLCJ2YWxpZGF0ZVJ1bGVzIiwibmFtZSIsImlkZW50aWZpZXIiLCJydWxlcyIsInR5cGUiLCJwcm9tcHQiLCJnbG9iYWxUcmFuc2xhdGUiLCJleHRfVmFsaWRhdGVDYXB0aW9uRW1wdHkiLCJpbml0aWFsaXplIiwiZHJvcGRvd24iLCJpbml0aWFsaXplRm9ybSIsImNiQmVmb3JlU2VuZEZvcm0iLCJzZXR0aW5ncyIsInJlc3VsdCIsImRhdGEiLCJmb3JtIiwiY2JBZnRlclNlbmRGb3JtIiwicmVzcG9uc2UiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJGb3JtIiwidXJsIiwiZ2xvYmFsUm9vdFVybCIsImRvY3VtZW50IiwicmVhZHkiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLHdCQUF3QixHQUFHO0FBQzdCO0FBQ0o7QUFDQTtBQUNBO0FBQ0lDLEVBQUFBLFFBQVEsRUFBRUMsQ0FBQyxDQUFDLDRCQUFELENBTGtCOztBQU83QjtBQUNKO0FBQ0E7QUFDQTtBQUNJQyxFQUFBQSxXQUFXLEVBQUVELENBQUMsQ0FBQyxzQkFBRCxDQVhlOztBQWE3QjtBQUNKO0FBQ0E7QUFDQTtBQUNJRSxFQUFBQSxtQkFBbUIsRUFBRUYsQ0FBQyxDQUFDLGFBQUQsQ0FqQk87O0FBbUI3QjtBQUNKO0FBQ0E7QUFDQTtBQUNJRyxFQUFBQSxhQUFhLEVBQUU7QUFDWEMsSUFBQUEsSUFBSSxFQUFFO0FBQ0ZDLE1BQUFBLFVBQVUsRUFBRSxTQURWO0FBRUZDLE1BQUFBLEtBQUssRUFBRSxDQUNIO0FBQ0lDLFFBQUFBLElBQUksRUFBRSxPQURWO0FBRUlDLFFBQUFBLE1BQU0sRUFBRUMsZUFBZSxDQUFDQztBQUY1QixPQURHO0FBRkw7QUFESyxHQXZCYzs7QUFtQzdCO0FBQ0o7QUFDQTtBQUNJQyxFQUFBQSxVQXRDNkIsd0JBc0NoQjtBQUNUYixJQUFBQSx3QkFBd0IsQ0FBQ0ksbUJBQXpCLENBQTZDVSxRQUE3QztBQUNBZCxJQUFBQSx3QkFBd0IsQ0FBQ2UsY0FBekI7QUFDSCxHQXpDNEI7O0FBMkM3QjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLEVBQUFBLGdCQWhENkIsNEJBZ0RaQyxRQWhEWSxFQWdERjtBQUN2QixRQUFNQyxNQUFNLEdBQUdELFFBQWY7QUFDQUMsSUFBQUEsTUFBTSxDQUFDQyxJQUFQLEdBQWNuQix3QkFBd0IsQ0FBQ0MsUUFBekIsQ0FBa0NtQixJQUFsQyxDQUF1QyxZQUF2QyxDQUFkO0FBQ0EsV0FBT0YsTUFBUDtBQUNILEdBcEQ0Qjs7QUFzRDdCO0FBQ0o7QUFDQTtBQUNBO0FBQ0lHLEVBQUFBLGVBMUQ2QiwyQkEwRGJDLFFBMURhLEVBMERIO0FBQ3RCQyxJQUFBQSxNQUFNLENBQUNDLFFBQVAsR0FBa0JELE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkMsSUFBbEM7QUFDSCxHQTVENEI7O0FBOEQ3QjtBQUNKO0FBQ0E7QUFDSVYsRUFBQUEsY0FqRTZCLDRCQWlFWjtBQUNiVyxJQUFBQSxJQUFJLENBQUN6QixRQUFMLEdBQWdCRCx3QkFBd0IsQ0FBQ0MsUUFBekM7QUFDQXlCLElBQUFBLElBQUksQ0FBQ0MsR0FBTCxhQUFjQyxhQUFkLGdDQUZhLENBRTRDOztBQUN6REYsSUFBQUEsSUFBSSxDQUFDckIsYUFBTCxHQUFxQkwsd0JBQXdCLENBQUNLLGFBQTlDLENBSGEsQ0FHZ0Q7O0FBQzdEcUIsSUFBQUEsSUFBSSxDQUFDVixnQkFBTCxHQUF3QmhCLHdCQUF3QixDQUFDZ0IsZ0JBQWpELENBSmEsQ0FJc0Q7O0FBQ25FVSxJQUFBQSxJQUFJLENBQUNMLGVBQUwsR0FBdUJyQix3QkFBd0IsQ0FBQ3FCLGVBQWhELENBTGEsQ0FLb0Q7O0FBQ2pFSyxJQUFBQSxJQUFJLENBQUNiLFVBQUw7QUFDSDtBQXhFNEIsQ0FBakMsQyxDQTJFQTs7QUFDQVgsQ0FBQyxDQUFDMkIsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUNwQjlCLEVBQUFBLHdCQUF3QixDQUFDYSxVQUF6QjtBQUNILENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IMKpIDIwMTctMjAyMyBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgZ2xvYmFsUm9vdFVybCwgRm9ybSwgZ2xvYmFsVHJhbnNsYXRlICovXG5cbi8qKlxuICogUHJvY2VzcyBjb21tb24gbW9kdWxlIHNldHRpbmdzLlxuICogQG1vZHVsZSBwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnlcbiAqL1xuY29uc3QgcGJ4RXh0ZW5zaW9uTW9kdWxlTW9kaWZ5ID0ge1xuICAgIC8qKlxuICAgICAqIGpRdWVyeSBvYmplY3QgZm9yIHRoZSBmb3JtLlxuICAgICAqIEB0eXBlIHtqUXVlcnl9XG4gICAgICovXG4gICAgJGZvcm1PYmo6ICQoJyNwYngtZXh0ZW5zaW9uLW1vZGlmeS1mb3JtJyksXG5cbiAgICAvKipcbiAgICAgKiBqUXVlcnkgb2JqZWN0IGZvciB0aGUgYmFjayBidXR0b24uXG4gICAgICogQHR5cGUge2pRdWVyeX1cbiAgICAgKi9cbiAgICAkYmFja0J1dHRvbjogJCgnI2JhY2stdG8tbGlzdC1idXR0b24nKSxcblxuICAgIC8qKlxuICAgICAqIGpRdWVyeSBvYmplY3QgZm9yIHRoZSBkcm9wZG93biBtZW51LlxuICAgICAqIEB0eXBlIHtqUXVlcnl9XG4gICAgICovXG4gICAgJGRyb3Bkb3duTWVudUdyb3VwczogJCgnI21lbnUtZ3JvdXAnKSxcblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRpb24gcnVsZXMgZm9yIHRoZSBmb3JtIGZpZWxkcyBiZWZvcmUgc3VibWlzc2lvbi5cbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqL1xuICAgIHZhbGlkYXRlUnVsZXM6IHtcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2NhcHRpb24nLFxuICAgICAgICAgICAgcnVsZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlbXB0eScsXG4gICAgICAgICAgICAgICAgICAgIHByb21wdDogZ2xvYmFsVHJhbnNsYXRlLmV4dF9WYWxpZGF0ZUNhcHRpb25FbXB0eSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIG1vZHVsZS5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICBwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnkuJGRyb3Bkb3duTWVudUdyb3Vwcy5kcm9wZG93bigpO1xuICAgICAgICBwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnkuaW5pdGlhbGl6ZUZvcm0oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGJlZm9yZSB0aGUgZm9ybSBpcyBzZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzIC0gVGhlIGN1cnJlbnQgc2V0dGluZ3Mgb2YgdGhlIGZvcm1cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIFRoZSB1cGRhdGVkIHNldHRpbmdzIG9mIHRoZSBmb3JtXG4gICAgICovXG4gICAgY2JCZWZvcmVTZW5kRm9ybShzZXR0aW5ncykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzZXR0aW5ncztcbiAgICAgICAgcmVzdWx0LmRhdGEgPSBwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnkuJGZvcm1PYmouZm9ybSgnZ2V0IHZhbHVlcycpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYWZ0ZXIgdGhlIGZvcm0gaGFzIGJlZW4gc2VudC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgLSBUaGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyIGFmdGVyIHRoZSBmb3JtIGlzIHNlbnRcbiAgICAgKi9cbiAgICBjYkFmdGVyU2VuZEZvcm0ocmVzcG9uc2UpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhlIGZvcm0gd2l0aCBjdXN0b20gc2V0dGluZ3NcbiAgICAgKi9cbiAgICBpbml0aWFsaXplRm9ybSgpIHtcbiAgICAgICAgRm9ybS4kZm9ybU9iaiA9IHBieEV4dGVuc2lvbk1vZHVsZU1vZGlmeS4kZm9ybU9iajtcbiAgICAgICAgRm9ybS51cmwgPSBgJHtnbG9iYWxSb290VXJsfXBieC1leHRlbnNpb24tbW9kdWxlcy9zYXZlYDsgLy8gRm9ybSBzdWJtaXNzaW9uIFVSTFxuICAgICAgICBGb3JtLnZhbGlkYXRlUnVsZXMgPSBwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnkudmFsaWRhdGVSdWxlczsgLy8gRm9ybSB2YWxpZGF0aW9uIHJ1bGVzXG4gICAgICAgIEZvcm0uY2JCZWZvcmVTZW5kRm9ybSA9IHBieEV4dGVuc2lvbk1vZHVsZU1vZGlmeS5jYkJlZm9yZVNlbmRGb3JtOyAvLyBDYWxsYmFjayBiZWZvcmUgZm9ybSBpcyBzZW50XG4gICAgICAgIEZvcm0uY2JBZnRlclNlbmRGb3JtID0gcGJ4RXh0ZW5zaW9uTW9kdWxlTW9kaWZ5LmNiQWZ0ZXJTZW5kRm9ybTsgLy8gQ2FsbGJhY2sgYWZ0ZXIgZm9ybSBpcyBzZW50XG4gICAgICAgIEZvcm0uaW5pdGlhbGl6ZSgpO1xuICAgIH0sXG59O1xuXG4vLyBXaGVuIHRoZSBkb2N1bWVudCBpcyByZWFkeSwgaW5pdGlhbGl6ZSB0aGUgZXh0ZXJuYWwgbW9kdWxlIG1hbmFnZW1lbnQgZm9ybS5cbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcbiAgICBwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnkuaW5pdGlhbGl6ZSgpO1xufSk7XG4iXX0=