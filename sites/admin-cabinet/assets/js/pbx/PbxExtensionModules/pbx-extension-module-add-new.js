"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global UserMessage, globalTranslate, PbxApi, upgradeStatusLoopWorker, mergingCheckWorker */

/**
 * Process push to button install new module from ZIP file
 *
 * @type {{checkStatusFileMerging(*=): void, uploadInProgress: boolean, initialize(): void, $uploadButton: (*|jQuery|HTMLElement), $progressBar: (*|jQuery|HTMLElement), $progressBarLabel: (*|jQuery), cbResumableUploadFile(*, *): void}}
 */
var addNewExtension = {
  $uploadButton: $('#add-new-button'),
  $progressBar: $('#upload-progress-bar'),
  $progressBarLabel: $('#upload-progress-bar').find('.label'),
  uploadInProgress: false,
  initialize: function initialize() {
    addNewExtension.$progressBar.hide();
    PbxApi.SystemUploadFileAttachToBtn('add-new-button', ['zip'], addNewExtension.cbResumableUploadFile);
  },

  /**
   * Upload file by chunks
   * @param action
   * @param params
   */
  cbResumableUploadFile: function cbResumableUploadFile(action, params) {
    switch (action) {
      case 'fileSuccess':
        addNewExtension.checkStatusFileMerging(params.response);
        break;

      case 'uploadStart':
        addNewExtension.uploadInProgress = true;
        addNewExtension.$uploadButton.addClass('loading');
        addNewExtension.$progressBar.show();
        addNewExtension.$progressBarLabel.text(globalTranslate.ext_UploadInProgress);
        break;

      case 'progress':
        addNewExtension.$progressBar.progress({
          percent: parseInt(params.percent, 10)
        });
        break;

      case 'error':
        addNewExtension.$progressBarLabel.text(globalTranslate.ext_UploadError);
        addNewExtension.$uploadButton.removeClass('loading');
        UserMessage.showMultiString(globalTranslate.ext_UploadError);
        break;

      default:
    }
  },

  /**
   * Wait for file ready to use
   *
   * @param response ответ функции /pbxcore/api/upload/status
   */
  checkStatusFileMerging: function checkStatusFileMerging(response) {
    if (response === undefined || PbxApi.tryParseJSON(response) === false) {
      UserMessage.showMultiString("".concat(globalTranslate.ext_UploadError));
      return;
    }

    var json = JSON.parse(response);

    if (json === undefined || json.data === undefined) {
      UserMessage.showMultiString("".concat(globalTranslate.ext_UploadError));
      return;
    }

    var fileID = json.data.upload_id;
    var filePath = json.data.filename;
    mergingCheckWorker.initialize(fileID, filePath);
  }
};
$(document).ready(function () {
  addNewExtension.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QYnhFeHRlbnNpb25Nb2R1bGVzL3BieC1leHRlbnNpb24tbW9kdWxlLWFkZC1uZXcuanMiXSwibmFtZXMiOlsiYWRkTmV3RXh0ZW5zaW9uIiwiJHVwbG9hZEJ1dHRvbiIsIiQiLCIkcHJvZ3Jlc3NCYXIiLCIkcHJvZ3Jlc3NCYXJMYWJlbCIsImZpbmQiLCJ1cGxvYWRJblByb2dyZXNzIiwiaW5pdGlhbGl6ZSIsImhpZGUiLCJQYnhBcGkiLCJTeXN0ZW1VcGxvYWRGaWxlQXR0YWNoVG9CdG4iLCJjYlJlc3VtYWJsZVVwbG9hZEZpbGUiLCJhY3Rpb24iLCJwYXJhbXMiLCJjaGVja1N0YXR1c0ZpbGVNZXJnaW5nIiwicmVzcG9uc2UiLCJhZGRDbGFzcyIsInNob3ciLCJ0ZXh0IiwiZ2xvYmFsVHJhbnNsYXRlIiwiZXh0X1VwbG9hZEluUHJvZ3Jlc3MiLCJwcm9ncmVzcyIsInBlcmNlbnQiLCJwYXJzZUludCIsImV4dF9VcGxvYWRFcnJvciIsInJlbW92ZUNsYXNzIiwiVXNlck1lc3NhZ2UiLCJzaG93TXVsdGlTdHJpbmciLCJ1bmRlZmluZWQiLCJ0cnlQYXJzZUpTT04iLCJqc29uIiwiSlNPTiIsInBhcnNlIiwiZGF0YSIsImZpbGVJRCIsInVwbG9hZF9pZCIsImZpbGVQYXRoIiwiZmlsZW5hbWUiLCJtZXJnaW5nQ2hlY2tXb3JrZXIiLCJkb2N1bWVudCIsInJlYWR5Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLGVBQWUsR0FBRztBQUN2QkMsRUFBQUEsYUFBYSxFQUFFQyxDQUFDLENBQUMsaUJBQUQsQ0FETztBQUV2QkMsRUFBQUEsWUFBWSxFQUFFRCxDQUFDLENBQUMsc0JBQUQsQ0FGUTtBQUd2QkUsRUFBQUEsaUJBQWlCLEVBQUVGLENBQUMsQ0FBQyxzQkFBRCxDQUFELENBQTBCRyxJQUExQixDQUErQixRQUEvQixDQUhJO0FBSXZCQyxFQUFBQSxnQkFBZ0IsRUFBRSxLQUpLO0FBS3ZCQyxFQUFBQSxVQUx1Qix3QkFLVjtBQUNaUCxJQUFBQSxlQUFlLENBQUNHLFlBQWhCLENBQTZCSyxJQUE3QjtBQUNBQyxJQUFBQSxNQUFNLENBQUNDLDJCQUFQLENBQW1DLGdCQUFuQyxFQUFvRCxDQUFDLEtBQUQsQ0FBcEQsRUFBNkRWLGVBQWUsQ0FBQ1cscUJBQTdFO0FBQ0EsR0FSc0I7O0FBU3ZCO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQ0EsRUFBQUEscUJBZHVCLGlDQWNEQyxNQWRDLEVBY09DLE1BZFAsRUFjYztBQUNwQyxZQUFRRCxNQUFSO0FBQ0MsV0FBSyxhQUFMO0FBQ0NaLFFBQUFBLGVBQWUsQ0FBQ2Msc0JBQWhCLENBQXVDRCxNQUFNLENBQUNFLFFBQTlDO0FBQ0E7O0FBQ0QsV0FBSyxhQUFMO0FBQ0NmLFFBQUFBLGVBQWUsQ0FBQ00sZ0JBQWhCLEdBQW1DLElBQW5DO0FBQ0FOLFFBQUFBLGVBQWUsQ0FBQ0MsYUFBaEIsQ0FBOEJlLFFBQTlCLENBQXVDLFNBQXZDO0FBQ0FoQixRQUFBQSxlQUFlLENBQUNHLFlBQWhCLENBQTZCYyxJQUE3QjtBQUNBakIsUUFBQUEsZUFBZSxDQUFDSSxpQkFBaEIsQ0FBa0NjLElBQWxDLENBQXVDQyxlQUFlLENBQUNDLG9CQUF2RDtBQUNBOztBQUNELFdBQUssVUFBTDtBQUNDcEIsUUFBQUEsZUFBZSxDQUFDRyxZQUFoQixDQUE2QmtCLFFBQTdCLENBQXNDO0FBQ3JDQyxVQUFBQSxPQUFPLEVBQUVDLFFBQVEsQ0FBQ1YsTUFBTSxDQUFDUyxPQUFSLEVBQWlCLEVBQWpCO0FBRG9CLFNBQXRDO0FBR0E7O0FBQ0QsV0FBSyxPQUFMO0FBQ0N0QixRQUFBQSxlQUFlLENBQUNJLGlCQUFoQixDQUFrQ2MsSUFBbEMsQ0FBdUNDLGVBQWUsQ0FBQ0ssZUFBdkQ7QUFDQXhCLFFBQUFBLGVBQWUsQ0FBQ0MsYUFBaEIsQ0FBOEJ3QixXQUE5QixDQUEwQyxTQUExQztBQUNBQyxRQUFBQSxXQUFXLENBQUNDLGVBQVosQ0FBNEJSLGVBQWUsQ0FBQ0ssZUFBNUM7QUFDQTs7QUFDRDtBQXBCRDtBQXNCQSxHQXJDc0I7O0FBc0N2QjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0NWLEVBQUFBLHNCQTNDdUIsa0NBMkNBQyxRQTNDQSxFQTJDVTtBQUNoQyxRQUFJQSxRQUFRLEtBQUthLFNBQWIsSUFBMEJuQixNQUFNLENBQUNvQixZQUFQLENBQW9CZCxRQUFwQixNQUFrQyxLQUFoRSxFQUF1RTtBQUN0RVcsTUFBQUEsV0FBVyxDQUFDQyxlQUFaLFdBQStCUixlQUFlLENBQUNLLGVBQS9DO0FBQ0E7QUFDQTs7QUFDRCxRQUFNTSxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXakIsUUFBWCxDQUFiOztBQUNBLFFBQUllLElBQUksS0FBS0YsU0FBVCxJQUFzQkUsSUFBSSxDQUFDRyxJQUFMLEtBQWNMLFNBQXhDLEVBQW1EO0FBQ2xERixNQUFBQSxXQUFXLENBQUNDLGVBQVosV0FBK0JSLGVBQWUsQ0FBQ0ssZUFBL0M7QUFDQTtBQUNBOztBQUNELFFBQU1VLE1BQU0sR0FBR0osSUFBSSxDQUFDRyxJQUFMLENBQVVFLFNBQXpCO0FBQ0EsUUFBTUMsUUFBUSxHQUFHTixJQUFJLENBQUNHLElBQUwsQ0FBVUksUUFBM0I7QUFDQUMsSUFBQUEsa0JBQWtCLENBQUMvQixVQUFuQixDQUE4QjJCLE1BQTlCLEVBQXNDRSxRQUF0QztBQUNBO0FBeERzQixDQUF4QjtBQTZEQWxDLENBQUMsQ0FBQ3FDLFFBQUQsQ0FBRCxDQUFZQyxLQUFaLENBQWtCLFlBQU07QUFDdkJ4QyxFQUFBQSxlQUFlLENBQUNPLFVBQWhCO0FBQ0EsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaWtvUEJYIC0gZnJlZSBwaG9uZSBzeXN0ZW0gZm9yIHNtYWxsIGJ1c2luZXNzXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTctMjAyMCBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgVXNlck1lc3NhZ2UsIGdsb2JhbFRyYW5zbGF0ZSwgUGJ4QXBpLCB1cGdyYWRlU3RhdHVzTG9vcFdvcmtlciwgbWVyZ2luZ0NoZWNrV29ya2VyICovXG5cbi8qKlxuICogUHJvY2VzcyBwdXNoIHRvIGJ1dHRvbiBpbnN0YWxsIG5ldyBtb2R1bGUgZnJvbSBaSVAgZmlsZVxuICpcbiAqIEB0eXBlIHt7Y2hlY2tTdGF0dXNGaWxlTWVyZ2luZygqPSk6IHZvaWQsIHVwbG9hZEluUHJvZ3Jlc3M6IGJvb2xlYW4sIGluaXRpYWxpemUoKTogdm9pZCwgJHVwbG9hZEJ1dHRvbjogKCp8alF1ZXJ5fEhUTUxFbGVtZW50KSwgJHByb2dyZXNzQmFyOiAoKnxqUXVlcnl8SFRNTEVsZW1lbnQpLCAkcHJvZ3Jlc3NCYXJMYWJlbDogKCp8alF1ZXJ5KSwgY2JSZXN1bWFibGVVcGxvYWRGaWxlKCosICopOiB2b2lkfX1cbiAqL1xuY29uc3QgYWRkTmV3RXh0ZW5zaW9uID0ge1xuXHQkdXBsb2FkQnV0dG9uOiAkKCcjYWRkLW5ldy1idXR0b24nKSxcblx0JHByb2dyZXNzQmFyOiAkKCcjdXBsb2FkLXByb2dyZXNzLWJhcicpLFxuXHQkcHJvZ3Jlc3NCYXJMYWJlbDogJCgnI3VwbG9hZC1wcm9ncmVzcy1iYXInKS5maW5kKCcubGFiZWwnKSxcblx0dXBsb2FkSW5Qcm9ncmVzczogZmFsc2UsXG5cdGluaXRpYWxpemUoKSB7XG5cdFx0YWRkTmV3RXh0ZW5zaW9uLiRwcm9ncmVzc0Jhci5oaWRlKCk7XG5cdFx0UGJ4QXBpLlN5c3RlbVVwbG9hZEZpbGVBdHRhY2hUb0J0bignYWRkLW5ldy1idXR0b24nLFsnemlwJ10sIGFkZE5ld0V4dGVuc2lvbi5jYlJlc3VtYWJsZVVwbG9hZEZpbGUpO1xuXHR9LFxuXHQvKipcblx0ICogVXBsb2FkIGZpbGUgYnkgY2h1bmtzXG5cdCAqIEBwYXJhbSBhY3Rpb25cblx0ICogQHBhcmFtIHBhcmFtc1xuXHQgKi9cblx0Y2JSZXN1bWFibGVVcGxvYWRGaWxlKGFjdGlvbiwgcGFyYW1zKXtcblx0XHRzd2l0Y2ggKGFjdGlvbikge1xuXHRcdFx0Y2FzZSAnZmlsZVN1Y2Nlc3MnOlxuXHRcdFx0XHRhZGROZXdFeHRlbnNpb24uY2hlY2tTdGF0dXNGaWxlTWVyZ2luZyhwYXJhbXMucmVzcG9uc2UpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ3VwbG9hZFN0YXJ0Jzpcblx0XHRcdFx0YWRkTmV3RXh0ZW5zaW9uLnVwbG9hZEluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRcdFx0XHRhZGROZXdFeHRlbnNpb24uJHVwbG9hZEJ1dHRvbi5hZGRDbGFzcygnbG9hZGluZycpO1xuXHRcdFx0XHRhZGROZXdFeHRlbnNpb24uJHByb2dyZXNzQmFyLnNob3coKTtcblx0XHRcdFx0YWRkTmV3RXh0ZW5zaW9uLiRwcm9ncmVzc0JhckxhYmVsLnRleHQoZ2xvYmFsVHJhbnNsYXRlLmV4dF9VcGxvYWRJblByb2dyZXNzKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdwcm9ncmVzcyc6XG5cdFx0XHRcdGFkZE5ld0V4dGVuc2lvbi4kcHJvZ3Jlc3NCYXIucHJvZ3Jlc3Moe1xuXHRcdFx0XHRcdHBlcmNlbnQ6IHBhcnNlSW50KHBhcmFtcy5wZXJjZW50LCAxMCksXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ2Vycm9yJzpcblx0XHRcdFx0YWRkTmV3RXh0ZW5zaW9uLiRwcm9ncmVzc0JhckxhYmVsLnRleHQoZ2xvYmFsVHJhbnNsYXRlLmV4dF9VcGxvYWRFcnJvcik7XG5cdFx0XHRcdGFkZE5ld0V4dGVuc2lvbi4kdXBsb2FkQnV0dG9uLnJlbW92ZUNsYXNzKCdsb2FkaW5nJyk7XG5cdFx0XHRcdFVzZXJNZXNzYWdlLnNob3dNdWx0aVN0cmluZyhnbG9iYWxUcmFuc2xhdGUuZXh0X1VwbG9hZEVycm9yKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdH1cblx0fSxcblx0LyoqXG5cdCAqIFdhaXQgZm9yIGZpbGUgcmVhZHkgdG8gdXNlXG5cdCAqXG5cdCAqIEBwYXJhbSByZXNwb25zZSDQvtGC0LLQtdGCINGE0YPQvdC60YbQuNC4IC9wYnhjb3JlL2FwaS91cGxvYWQvc3RhdHVzXG5cdCAqL1xuXHRjaGVja1N0YXR1c0ZpbGVNZXJnaW5nKHJlc3BvbnNlKSB7XG5cdFx0aWYgKHJlc3BvbnNlID09PSB1bmRlZmluZWQgfHwgUGJ4QXBpLnRyeVBhcnNlSlNPTihyZXNwb25zZSkgPT09IGZhbHNlKSB7XG5cdFx0XHRVc2VyTWVzc2FnZS5zaG93TXVsdGlTdHJpbmcoYCR7Z2xvYmFsVHJhbnNsYXRlLmV4dF9VcGxvYWRFcnJvcn1gKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QganNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuXHRcdGlmIChqc29uID09PSB1bmRlZmluZWQgfHwganNvbi5kYXRhID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFVzZXJNZXNzYWdlLnNob3dNdWx0aVN0cmluZyhgJHtnbG9iYWxUcmFuc2xhdGUuZXh0X1VwbG9hZEVycm9yfWApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBmaWxlSUQgPSBqc29uLmRhdGEudXBsb2FkX2lkO1xuXHRcdGNvbnN0IGZpbGVQYXRoID0ganNvbi5kYXRhLmZpbGVuYW1lO1xuXHRcdG1lcmdpbmdDaGVja1dvcmtlci5pbml0aWFsaXplKGZpbGVJRCwgZmlsZVBhdGgpO1xuXHR9LFxuXG59O1xuXG5cbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcblx0YWRkTmV3RXh0ZW5zaW9uLmluaXRpYWxpemUoKTtcbn0pO1xuIl19