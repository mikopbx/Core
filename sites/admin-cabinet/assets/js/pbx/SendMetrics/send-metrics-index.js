"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global sessionStorage, PbxApi */

/**
 * Object responsible for sending PBX metrics.
 *
 * @module sendMetrics
 */
var sendMetrics = {
  /**
   * Initializes the send metrics functionality by checking if metrics have already been sent.
   * If metrics have not been sent, it sends the metrics.
   */
  initialize: function initialize() {
    var isMetricsSend = sessionStorage.getItem('MetricsAlreadySent');

    if (isMetricsSend === null) {
      PbxApi.LicenseSendPBXMetrics(sendMetrics.cbAfterMetricsSent);
    }
  },

  /**
   * Callback function after metrics have been sent.
   * @param {boolean} result - The result of sending the metrics.
   */
  cbAfterMetricsSent: function cbAfterMetricsSent(result) {
    if (result === true) {
      sessionStorage.setItem('MetricsAlreadySent', 'true');
    }
  }
};
/**
 * Sends PBX metrics on document ready.
 */

$(document).ready(function () {
  sendMetrics.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TZW5kTWV0cmljcy9zZW5kLW1ldHJpY3MtaW5kZXguanMiXSwibmFtZXMiOlsic2VuZE1ldHJpY3MiLCJpbml0aWFsaXplIiwiaXNNZXRyaWNzU2VuZCIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsIlBieEFwaSIsIkxpY2Vuc2VTZW5kUEJYTWV0cmljcyIsImNiQWZ0ZXJNZXRyaWNzU2VudCIsInJlc3VsdCIsInNldEl0ZW0iLCIkIiwiZG9jdW1lbnQiLCJyZWFkeSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxXQUFXLEdBQUc7QUFFaEI7QUFDSjtBQUNBO0FBQ0E7QUFDSUMsRUFBQUEsVUFOZ0Isd0JBTUg7QUFDVCxRQUFNQyxhQUFhLEdBQUdDLGNBQWMsQ0FBQ0MsT0FBZixDQUF1QixvQkFBdkIsQ0FBdEI7O0FBQ0EsUUFBSUYsYUFBYSxLQUFLLElBQXRCLEVBQTRCO0FBQ3hCRyxNQUFBQSxNQUFNLENBQUNDLHFCQUFQLENBQTZCTixXQUFXLENBQUNPLGtCQUF6QztBQUVIO0FBQ0osR0FaZTs7QUFjaEI7QUFDSjtBQUNBO0FBQ0E7QUFDSUEsRUFBQUEsa0JBbEJnQiw4QkFrQkdDLE1BbEJILEVBa0JXO0FBQ3ZCLFFBQUlBLE1BQU0sS0FBSyxJQUFmLEVBQXFCO0FBQ2pCTCxNQUFBQSxjQUFjLENBQUNNLE9BQWYsQ0FBdUIsb0JBQXZCLEVBQTZDLE1BQTdDO0FBQ0g7QUFDSjtBQXRCZSxDQUFwQjtBQXlCQTtBQUNBO0FBQ0E7O0FBQ0FDLENBQUMsQ0FBQ0MsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUNwQlosRUFBQUEsV0FBVyxDQUFDQyxVQUFaO0FBQ0gsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaWtvUEJYIC0gZnJlZSBwaG9uZSBzeXN0ZW0gZm9yIHNtYWxsIGJ1c2luZXNzXG4gKiBDb3B5cmlnaHQgwqkgMjAxNy0yMDIzIEFsZXhleSBQb3J0bm92IGFuZCBOaWtvbGF5IEJla2V0b3ZcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uXG4gKiBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG5cbi8qIGdsb2JhbCBzZXNzaW9uU3RvcmFnZSwgUGJ4QXBpICovXG5cbi8qKlxuICogT2JqZWN0IHJlc3BvbnNpYmxlIGZvciBzZW5kaW5nIFBCWCBtZXRyaWNzLlxuICpcbiAqIEBtb2R1bGUgc2VuZE1ldHJpY3NcbiAqL1xuY29uc3Qgc2VuZE1ldHJpY3MgPSB7XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgc2VuZCBtZXRyaWNzIGZ1bmN0aW9uYWxpdHkgYnkgY2hlY2tpbmcgaWYgbWV0cmljcyBoYXZlIGFscmVhZHkgYmVlbiBzZW50LlxuICAgICAqIElmIG1ldHJpY3MgaGF2ZSBub3QgYmVlbiBzZW50LCBpdCBzZW5kcyB0aGUgbWV0cmljcy5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICBjb25zdCBpc01ldHJpY3NTZW5kID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnTWV0cmljc0FscmVhZHlTZW50Jyk7XG4gICAgICAgIGlmIChpc01ldHJpY3NTZW5kID09PSBudWxsKSB7XG4gICAgICAgICAgICBQYnhBcGkuTGljZW5zZVNlbmRQQlhNZXRyaWNzKHNlbmRNZXRyaWNzLmNiQWZ0ZXJNZXRyaWNzU2VudCk7XG5cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBmdW5jdGlvbiBhZnRlciBtZXRyaWNzIGhhdmUgYmVlbiBzZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVzdWx0IC0gVGhlIHJlc3VsdCBvZiBzZW5kaW5nIHRoZSBtZXRyaWNzLlxuICAgICAqL1xuICAgIGNiQWZ0ZXJNZXRyaWNzU2VudChyZXN1bHQpIHtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnTWV0cmljc0FscmVhZHlTZW50JywgJ3RydWUnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBTZW5kcyBQQlggbWV0cmljcyBvbiBkb2N1bWVudCByZWFkeS5cbiAqL1xuJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xuICAgIHNlbmRNZXRyaWNzLmluaXRpYWxpemUoKTtcbn0pOyJdfQ==