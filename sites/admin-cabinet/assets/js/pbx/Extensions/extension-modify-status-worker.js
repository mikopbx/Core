"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2021 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalTranslate, extension, DebuggerInfo, PbxApi */
var extensionStatusLoopWorker = {
  timeOut: 3000,
  timeOutHandle: '',
  $statusLabel: $('#status'),

  /**
   * initialize() создание объектов и запуск их
   */
  initialize: function initialize() {
    DebuggerInfo.initialize();

    if (extension.$formObj.form('get value', 'id') !== '') {
      extensionStatusLoopWorker.restartWorker();
    }
  },
  restartWorker: function restartWorker() {
    window.clearTimeout(extensionStatusLoopWorker.timeoutHandle);
    extensionStatusLoopWorker.worker();
  },
  worker: function worker() {
    if (extension.defaultNumber.length === 0) return;
    var param = {
      peer: extension.defaultNumber
    };
    window.clearTimeout(extensionStatusLoopWorker.timeoutHandle);
    PbxApi.GetPeerStatus(param, extensionStatusLoopWorker.cbRefreshExtensionStatus);
  },

  /**
   * cbRefreshExtensionStatus() Обновление статусов пира
   */
  cbRefreshExtensionStatus: function cbRefreshExtensionStatus(response) {
    extensionStatusLoopWorker.timeoutHandle = window.setTimeout(extensionStatusLoopWorker.worker, extensionStatusLoopWorker.timeOut);
    if (response.length === 0 || response === false) return;
    var $status = extensionStatusLoopWorker.$statusLabel;
    var htmlTable = '<table class="ui very compact table">';
    $.each(response, function (key, value) {
      htmlTable += '<tr>';
      htmlTable += "<td>".concat(key, "</td>");
      htmlTable += "<td>".concat(value, "</td>");
      htmlTable += '</tr>';
    });
    htmlTable += '</table>';
    DebuggerInfo.UpdateContent(htmlTable);

    if ('Status' in response && response.Status.toUpperCase().indexOf('REACHABLE') >= 0) {
      $status.removeClass('grey').addClass('green');
    } else {
      $status.removeClass('green').addClass('grey');
    }

    if ($status.hasClass('green')) {
      $status.html(globalTranslate.ex_Online);
    } else {
      $status.html(globalTranslate.ex_Offline);
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FeHRlbnNpb25zL2V4dGVuc2lvbi1tb2RpZnktc3RhdHVzLXdvcmtlci5qcyJdLCJuYW1lcyI6WyJleHRlbnNpb25TdGF0dXNMb29wV29ya2VyIiwidGltZU91dCIsInRpbWVPdXRIYW5kbGUiLCIkc3RhdHVzTGFiZWwiLCIkIiwiaW5pdGlhbGl6ZSIsIkRlYnVnZ2VySW5mbyIsImV4dGVuc2lvbiIsIiRmb3JtT2JqIiwiZm9ybSIsInJlc3RhcnRXb3JrZXIiLCJ3aW5kb3ciLCJjbGVhclRpbWVvdXQiLCJ0aW1lb3V0SGFuZGxlIiwid29ya2VyIiwiZGVmYXVsdE51bWJlciIsImxlbmd0aCIsInBhcmFtIiwicGVlciIsIlBieEFwaSIsIkdldFBlZXJTdGF0dXMiLCJjYlJlZnJlc2hFeHRlbnNpb25TdGF0dXMiLCJyZXNwb25zZSIsInNldFRpbWVvdXQiLCIkc3RhdHVzIiwiaHRtbFRhYmxlIiwiZWFjaCIsImtleSIsInZhbHVlIiwiVXBkYXRlQ29udGVudCIsIlN0YXR1cyIsInRvVXBwZXJDYXNlIiwiaW5kZXhPZiIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJoYXNDbGFzcyIsImh0bWwiLCJnbG9iYWxUcmFuc2xhdGUiLCJleF9PbmxpbmUiLCJleF9PZmZsaW5lIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFFQSxJQUFNQSx5QkFBeUIsR0FBRztBQUNqQ0MsRUFBQUEsT0FBTyxFQUFFLElBRHdCO0FBRWpDQyxFQUFBQSxhQUFhLEVBQUUsRUFGa0I7QUFHakNDLEVBQUFBLFlBQVksRUFBRUMsQ0FBQyxDQUFDLFNBQUQsQ0FIa0I7O0FBSWpDO0FBQ0Q7QUFDQTtBQUNDQyxFQUFBQSxVQVBpQyx3QkFPcEI7QUFDWkMsSUFBQUEsWUFBWSxDQUFDRCxVQUFiOztBQUNBLFFBQUlFLFNBQVMsQ0FBQ0MsUUFBVixDQUFtQkMsSUFBbkIsQ0FBd0IsV0FBeEIsRUFBb0MsSUFBcEMsTUFBNEMsRUFBaEQsRUFBbUQ7QUFDbERULE1BQUFBLHlCQUF5QixDQUFDVSxhQUExQjtBQUNBO0FBQ0QsR0FaZ0M7QUFhakNBLEVBQUFBLGFBYmlDLDJCQWFqQjtBQUNmQyxJQUFBQSxNQUFNLENBQUNDLFlBQVAsQ0FBb0JaLHlCQUF5QixDQUFDYSxhQUE5QztBQUNBYixJQUFBQSx5QkFBeUIsQ0FBQ2MsTUFBMUI7QUFDQSxHQWhCZ0M7QUFpQmpDQSxFQUFBQSxNQWpCaUMsb0JBaUJ4QjtBQUNSLFFBQUlQLFNBQVMsQ0FBQ1EsYUFBVixDQUF3QkMsTUFBeEIsS0FBbUMsQ0FBdkMsRUFBMEM7QUFDMUMsUUFBTUMsS0FBSyxHQUFHO0FBQUVDLE1BQUFBLElBQUksRUFBRVgsU0FBUyxDQUFDUTtBQUFsQixLQUFkO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQloseUJBQXlCLENBQUNhLGFBQTlDO0FBQ0FNLElBQUFBLE1BQU0sQ0FBQ0MsYUFBUCxDQUFxQkgsS0FBckIsRUFBNEJqQix5QkFBeUIsQ0FBQ3FCLHdCQUF0RDtBQUNBLEdBdEJnQzs7QUF1QmpDO0FBQ0Q7QUFDQTtBQUNDQSxFQUFBQSx3QkExQmlDLG9DQTBCUkMsUUExQlEsRUEwQkU7QUFDbEN0QixJQUFBQSx5QkFBeUIsQ0FBQ2EsYUFBMUIsR0FDQ0YsTUFBTSxDQUFDWSxVQUFQLENBQWtCdkIseUJBQXlCLENBQUNjLE1BQTVDLEVBQW9EZCx5QkFBeUIsQ0FBQ0MsT0FBOUUsQ0FERDtBQUVBLFFBQUlxQixRQUFRLENBQUNOLE1BQVQsS0FBb0IsQ0FBcEIsSUFBeUJNLFFBQVEsS0FBSyxLQUExQyxFQUFpRDtBQUNqRCxRQUFNRSxPQUFPLEdBQUd4Qix5QkFBeUIsQ0FBQ0csWUFBMUM7QUFFQSxRQUFJc0IsU0FBUyxHQUFHLHVDQUFoQjtBQUNBckIsSUFBQUEsQ0FBQyxDQUFDc0IsSUFBRixDQUFPSixRQUFQLEVBQWlCLFVBQUNLLEdBQUQsRUFBTUMsS0FBTixFQUFnQjtBQUNoQ0gsTUFBQUEsU0FBUyxJQUFJLE1BQWI7QUFDQUEsTUFBQUEsU0FBUyxrQkFBV0UsR0FBWCxVQUFUO0FBQ0FGLE1BQUFBLFNBQVMsa0JBQVdHLEtBQVgsVUFBVDtBQUNBSCxNQUFBQSxTQUFTLElBQUksT0FBYjtBQUNBLEtBTEQ7QUFNQUEsSUFBQUEsU0FBUyxJQUFJLFVBQWI7QUFDQW5CLElBQUFBLFlBQVksQ0FBQ3VCLGFBQWIsQ0FBMkJKLFNBQTNCOztBQUVBLFFBQUksWUFBWUgsUUFBWixJQUF3QkEsUUFBUSxDQUFDUSxNQUFULENBQWdCQyxXQUFoQixHQUE4QkMsT0FBOUIsQ0FBc0MsV0FBdEMsS0FBc0QsQ0FBbEYsRUFBcUY7QUFDcEZSLE1BQUFBLE9BQU8sQ0FBQ1MsV0FBUixDQUFvQixNQUFwQixFQUE0QkMsUUFBNUIsQ0FBcUMsT0FBckM7QUFDQSxLQUZELE1BRU87QUFDTlYsTUFBQUEsT0FBTyxDQUFDUyxXQUFSLENBQW9CLE9BQXBCLEVBQTZCQyxRQUE3QixDQUFzQyxNQUF0QztBQUNBOztBQUNELFFBQUlWLE9BQU8sQ0FBQ1csUUFBUixDQUFpQixPQUFqQixDQUFKLEVBQStCO0FBQzlCWCxNQUFBQSxPQUFPLENBQUNZLElBQVIsQ0FBYUMsZUFBZSxDQUFDQyxTQUE3QjtBQUNBLEtBRkQsTUFFTztBQUNOZCxNQUFBQSxPQUFPLENBQUNZLElBQVIsQ0FBYUMsZUFBZSxDQUFDRSxVQUE3QjtBQUNBO0FBQ0Q7QUFwRGdDLENBQWxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIE1pa29QQlggLSBmcmVlIHBob25lIHN5c3RlbSBmb3Igc21hbGwgYnVzaW5lc3NcbiAqIENvcHlyaWdodCAoQykgMjAxNy0yMDIxIEFsZXhleSBQb3J0bm92IGFuZCBOaWtvbGF5IEJla2V0b3ZcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uXG4gKiBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG5cblxuLyogZ2xvYmFsIGdsb2JhbFRyYW5zbGF0ZSwgZXh0ZW5zaW9uLCBEZWJ1Z2dlckluZm8sIFBieEFwaSAqL1xuXG5jb25zdCBleHRlbnNpb25TdGF0dXNMb29wV29ya2VyID0ge1xuXHR0aW1lT3V0OiAzMDAwLFxuXHR0aW1lT3V0SGFuZGxlOiAnJyxcblx0JHN0YXR1c0xhYmVsOiAkKCcjc3RhdHVzJyksXG5cdC8qKlxuXHQgKiBpbml0aWFsaXplKCkg0YHQvtC30LTQsNC90LjQtSDQvtCx0YrQtdC60YLQvtCyINC4INC30LDQv9GD0YHQuiDQuNGFXG5cdCAqL1xuXHRpbml0aWFsaXplKCkge1xuXHRcdERlYnVnZ2VySW5mby5pbml0aWFsaXplKCk7XG5cdFx0aWYgKGV4dGVuc2lvbi4kZm9ybU9iai5mb3JtKCdnZXQgdmFsdWUnLCdpZCcpIT09Jycpe1xuXHRcdFx0ZXh0ZW5zaW9uU3RhdHVzTG9vcFdvcmtlci5yZXN0YXJ0V29ya2VyKCk7XG5cdFx0fVxuXHR9LFxuXHRyZXN0YXJ0V29ya2VyKCkge1xuXHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoZXh0ZW5zaW9uU3RhdHVzTG9vcFdvcmtlci50aW1lb3V0SGFuZGxlKTtcblx0XHRleHRlbnNpb25TdGF0dXNMb29wV29ya2VyLndvcmtlcigpO1xuXHR9LFxuXHR3b3JrZXIoKSB7XG5cdFx0aWYgKGV4dGVuc2lvbi5kZWZhdWx0TnVtYmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXHRcdGNvbnN0IHBhcmFtID0geyBwZWVyOiBleHRlbnNpb24uZGVmYXVsdE51bWJlciB9O1xuXHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoZXh0ZW5zaW9uU3RhdHVzTG9vcFdvcmtlci50aW1lb3V0SGFuZGxlKTtcblx0XHRQYnhBcGkuR2V0UGVlclN0YXR1cyhwYXJhbSwgZXh0ZW5zaW9uU3RhdHVzTG9vcFdvcmtlci5jYlJlZnJlc2hFeHRlbnNpb25TdGF0dXMpO1xuXHR9LFxuXHQvKipcblx0ICogY2JSZWZyZXNoRXh0ZW5zaW9uU3RhdHVzKCkg0J7QsdC90L7QstC70LXQvdC40LUg0YHRgtCw0YLRg9GB0L7QsiDQv9C40YDQsFxuXHQgKi9cblx0Y2JSZWZyZXNoRXh0ZW5zaW9uU3RhdHVzKHJlc3BvbnNlKSB7XG5cdFx0ZXh0ZW5zaW9uU3RhdHVzTG9vcFdvcmtlci50aW1lb3V0SGFuZGxlID1cblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KGV4dGVuc2lvblN0YXR1c0xvb3BXb3JrZXIud29ya2VyLCBleHRlbnNpb25TdGF0dXNMb29wV29ya2VyLnRpbWVPdXQpO1xuXHRcdGlmIChyZXNwb25zZS5sZW5ndGggPT09IDAgfHwgcmVzcG9uc2UgPT09IGZhbHNlKSByZXR1cm47XG5cdFx0Y29uc3QgJHN0YXR1cyA9IGV4dGVuc2lvblN0YXR1c0xvb3BXb3JrZXIuJHN0YXR1c0xhYmVsO1xuXG5cdFx0bGV0IGh0bWxUYWJsZSA9ICc8dGFibGUgY2xhc3M9XCJ1aSB2ZXJ5IGNvbXBhY3QgdGFibGVcIj4nO1xuXHRcdCQuZWFjaChyZXNwb25zZSwgKGtleSwgdmFsdWUpID0+IHtcblx0XHRcdGh0bWxUYWJsZSArPSAnPHRyPic7XG5cdFx0XHRodG1sVGFibGUgKz0gYDx0ZD4ke2tleX08L3RkPmA7XG5cdFx0XHRodG1sVGFibGUgKz0gYDx0ZD4ke3ZhbHVlfTwvdGQ+YDtcblx0XHRcdGh0bWxUYWJsZSArPSAnPC90cj4nO1xuXHRcdH0pO1xuXHRcdGh0bWxUYWJsZSArPSAnPC90YWJsZT4nO1xuXHRcdERlYnVnZ2VySW5mby5VcGRhdGVDb250ZW50KGh0bWxUYWJsZSk7XG5cblx0XHRpZiAoJ1N0YXR1cycgaW4gcmVzcG9uc2UgJiYgcmVzcG9uc2UuU3RhdHVzLnRvVXBwZXJDYXNlKCkuaW5kZXhPZignUkVBQ0hBQkxFJykgPj0gMCkge1xuXHRcdFx0JHN0YXR1cy5yZW1vdmVDbGFzcygnZ3JleScpLmFkZENsYXNzKCdncmVlbicpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkc3RhdHVzLnJlbW92ZUNsYXNzKCdncmVlbicpLmFkZENsYXNzKCdncmV5Jyk7XG5cdFx0fVxuXHRcdGlmICgkc3RhdHVzLmhhc0NsYXNzKCdncmVlbicpKSB7XG5cdFx0XHQkc3RhdHVzLmh0bWwoZ2xvYmFsVHJhbnNsYXRlLmV4X09ubGluZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCRzdGF0dXMuaHRtbChnbG9iYWxUcmFuc2xhdGUuZXhfT2ZmbGluZSk7XG5cdFx0fVxuXHR9LFxufTsiXX0=