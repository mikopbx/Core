"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2021 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, Form, extension, Image  */
var avatar = {
  // Store reference to the avatar picture element
  $picture: $('#avatar'),
  // Initialize the avatar component
  initialize: function initialize() {
    // Check if the avatar picture source is empty and set a default image
    if (avatar.$picture.attr('src') === '') {
      avatar.$picture.attr('src', "".concat(globalRootUrl, "assets/img/unknownPerson.jpg"));
    } // Bind click event to upload new avatar button


    $('#upload-new-avatar').on('click', function () {
      $('#file-select').click();
    }); // Bind click event to clear avatar button

    $('#clear-avatar').on('click', function () {
      avatar.$picture.attr('src', "".concat(globalRootUrl, "assets/img/unknownPerson.jpg"));
      extension.$formObj.form('set value', 'user_avatar', null);
      extension.$sip_secret.trigger('change');
    }); // Bind change event to file select input

    $('#file-select').on('change', function (e) {
      var image;
      e.preventDefault();
      var dataTransfer = 'dataTransfer' in e ? e.dataTransfer.files : [];
      var images = 'files' in e.target ? e.target.files : dataTransfer; // Process selected images

      if (images && images.length) {
        Array.from(images).forEach(function (curImage) {
          if (_typeof(curImage) !== 'object') return; // Create new image element and load selected image

          image = new Image();
          image.src = avatar.createObjectURL(curImage);

          image.onload = function (event) {
            var args = {
              src: event.target,
              width: 200,
              height: 200,
              type: 'image/png',
              compress: 90
            }; // Resize and crop the image

            var mybase64resized = avatar.resizeCrop(args); // Update avatar picture source

            avatar.$picture.attr('src', mybase64resized); // Update form value and trigger change event

            extension.$formObj.form('set value', 'user_avatar', mybase64resized);
            extension.$sip_secret.trigger('change');
          };
        });
      }
    });
  },
  // Resize and crop the image
  resizeCrop: function resizeCrop(_ref) {
    var src = _ref.src,
        width = _ref.width,
        height = _ref.height,
        type = _ref.type,
        compress = _ref.compress;
    var newWidth = width;
    var newHeight = height;
    var crop = newWidth === 0 || newHeight === 0; // Skip resizing if the image is smaller than the desired size

    if (src.width <= newWidth && newHeight === 0) {
      newWidth = src.width;
      newHeight = src.height;
    } // Calculate new height while maintaining aspect ratio


    if (src.width > newWidth && newHeight === 0) {
      newHeight = src.height * (newWidth / src.width);
    } // Calculate scale factors


    var xscale = newWidth / src.width;
    var yscale = newHeight / src.height;
    var scale = crop ? Math.min(xscale, yscale) : Math.max(xscale, yscale); // Create an empty canvas element

    var canvas = document.createElement('canvas');
    canvas.width = newWidth || Math.round(src.width * scale);
    canvas.height = newHeight || Math.round(src.height * scale);
    canvas.getContext('2d').scale(scale, scale); // Crop the image to the top center

    canvas.getContext('2d').drawImage(src, (src.width * scale - canvas.width) * -0.5, (src.height * scale - canvas.height) * -0.5);
    return canvas.toDataURL(type, compress);
  },
  createObjectURL: function createObjectURL(i) {
    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;
    return URL.createObjectURL(i);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FeHRlbnNpb25zL2V4dGVuc2lvbi1tb2RpZnktYXZhdGFyLmpzIl0sIm5hbWVzIjpbImF2YXRhciIsIiRwaWN0dXJlIiwiJCIsImluaXRpYWxpemUiLCJhdHRyIiwiZ2xvYmFsUm9vdFVybCIsIm9uIiwiY2xpY2siLCJleHRlbnNpb24iLCIkZm9ybU9iaiIsImZvcm0iLCIkc2lwX3NlY3JldCIsInRyaWdnZXIiLCJlIiwiaW1hZ2UiLCJwcmV2ZW50RGVmYXVsdCIsImRhdGFUcmFuc2ZlciIsImZpbGVzIiwiaW1hZ2VzIiwidGFyZ2V0IiwibGVuZ3RoIiwiQXJyYXkiLCJmcm9tIiwiZm9yRWFjaCIsImN1ckltYWdlIiwiSW1hZ2UiLCJzcmMiLCJjcmVhdGVPYmplY3RVUkwiLCJvbmxvYWQiLCJldmVudCIsImFyZ3MiLCJ3aWR0aCIsImhlaWdodCIsInR5cGUiLCJjb21wcmVzcyIsIm15YmFzZTY0cmVzaXplZCIsInJlc2l6ZUNyb3AiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsImNyb3AiLCJ4c2NhbGUiLCJ5c2NhbGUiLCJzY2FsZSIsIk1hdGgiLCJtaW4iLCJtYXgiLCJjYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJyb3VuZCIsImdldENvbnRleHQiLCJkcmF3SW1hZ2UiLCJ0b0RhdGFVUkwiLCJpIiwiVVJMIiwid2luZG93Iiwid2Via2l0VVJMIiwibW96VVJMIiwibXNVUkwiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBRUEsSUFBTUEsTUFBTSxHQUFHO0FBQ1g7QUFDQUMsRUFBQUEsUUFBUSxFQUFFQyxDQUFDLENBQUMsU0FBRCxDQUZBO0FBSVg7QUFDQUMsRUFBQUEsVUFMVyx3QkFLRTtBQUVUO0FBQ0EsUUFBSUgsTUFBTSxDQUFDQyxRQUFQLENBQWdCRyxJQUFo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dkIsR0FBRyxDQUFDSyxLQUFKLEdBQVlXLEtBQXZCLENBQTNCO0FBQ0FJLElBQUFBLE1BQU0sQ0FBQ2QsTUFBUCxHQUFnQk0sU0FBUyxJQUFJSyxJQUFJLENBQUNNLEtBQUwsQ0FBV3ZCLEdBQUcsQ0FBQ00sTUFBSixHQUFhVSxLQUF4QixDQUE3QjtBQUNBSSxJQUFBQSxNQUFNLENBQUNJLFVBQVAsQ0FBa0IsSUFBbEIsRUFBd0JSLEtBQXhCLENBQThCQSxLQUE5QixFQUFxQ0EsS0FBckMsRUF6QlUsQ0EyQlY7O0FBQ0FJLElBQUFBLE1BQU0sQ0FBQ0ksVUFBUCxDQUFrQixJQUFsQixFQUF3QkMsU0FBeEIsQ0FBa0N6QixHQUFsQyxFQUF1QyxDQUFFQSxHQUFHLENBQUNLLEtBQUosR0FBWVcsS0FBYixHQUFzQkksTUFBTSxDQUFDZixLQUE5QixJQUF1QyxDQUFDLEdBQS9FLEVBQW9GLENBQUVMLEdBQUcsQ0FBQ00sTUFBSixHQUFhVSxLQUFkLEdBQXVCSSxNQUFNLENBQUNkLE1BQS9CLElBQXlDLENBQUMsR0FBOUg7QUFDQSxXQUFPYyxNQUFNLENBQUNNLFNBQVAsQ0FBaUJuQixJQUFqQixFQUF1QkMsUUFBdkIsQ0FBUDtBQUNILEdBaEdVO0FBaUdYUCxFQUFBQSxlQWpHVywyQkFpR0swQixDQWpHTCxFQWlHUTtBQUNmLFFBQU1DLEdBQUcsR0FBR0MsTUFBTSxDQUFDRCxHQUFQLElBQWNDLE1BQU0sQ0FBQ0MsU0FBckIsSUFBa0NELE1BQU0sQ0FBQ0UsTUFBekMsSUFBbURGLE1BQU0sQ0FBQ0csS0FBdEU7QUFDQSxXQUFPSixHQUFHLENBQUMzQixlQUFKLENBQW9CMEIsQ0FBcEIsQ0FBUDtBQUNIO0FBcEdVLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IMKpIDIwMTctMjAyMSBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgZ2xvYmFsUm9vdFVybCwgRm9ybSwgZXh0ZW5zaW9uLCBJbWFnZSAgKi9cblxuY29uc3QgYXZhdGFyID0ge1xuICAgIC8vIFN0b3JlIHJlZmVyZW5jZSB0byB0aGUgYXZhdGFyIHBpY3R1cmUgZWxlbWVudFxuICAgICRwaWN0dXJlOiAkKCcjYXZhdGFyJyksXG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBhdmF0YXIgY29tcG9uZW50XG4gICAgaW5pdGlhbGl6ZSgpIHtcblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgYXZhdGFyIHBpY3R1cmUgc291cmNlIGlzIGVtcHR5IGFuZCBzZXQgYSBkZWZhdWx0IGltYWdlXG4gICAgICAgIGlmIChhdmF0YXIuJHBpY3R1cmUuYXR0cignc3JjJykgPT09ICcnKSB7XG4gICAgICAgICAgICBhdmF0YXIuJHBpY3R1cmUuYXR0cignc3JjJywgYCR7Z2xvYmFsUm9vdFVybH1hc3NldHMvaW1nL3Vua25vd25QZXJzb24uanBnYCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCaW5kIGNsaWNrIGV2ZW50IHRvIHVwbG9hZCBuZXcgYXZhdGFyIGJ1dHRvblxuICAgICAgICAkKCcjdXBsb2FkLW5ldy1hdmF0YXInKS5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAkKCcjZmlsZS1zZWxlY3QnKS5jbGljaygpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBCaW5kIGNsaWNrIGV2ZW50IHRvIGNsZWFyIGF2YXRhciBidXR0b25cbiAgICAgICAgJCgnI2NsZWFyLWF2YXRhcicpLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGF2YXRhci4kcGljdHVyZS5hdHRyKCdzcmMnLCBgJHtnbG9iYWxSb290VXJsfWFzc2V0cy9pbWcvdW5rbm93blBlcnNvbi5qcGdgKTtcbiAgICAgICAgICAgIGV4dGVuc2lvbi4kZm9ybU9iai5mb3JtKCdzZXQgdmFsdWUnLCAndXNlcl9hdmF0YXInLCBudWxsKTtcbiAgICAgICAgICAgIGV4dGVuc2lvbi4kc2lwX3NlY3JldC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQmluZCBjaGFuZ2UgZXZlbnQgdG8gZmlsZSBzZWxlY3QgaW5wdXRcbiAgICAgICAgJCgnI2ZpbGUtc2VsZWN0Jykub24oJ2NoYW5nZScsIChlKSA9PiB7XG4gICAgICAgICAgICBsZXQgaW1hZ2U7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjb25zdCBkYXRhVHJhbnNmZXIgPSAnZGF0YVRyYW5zZmVyJyBpbiBlID8gZS5kYXRhVHJhbnNmZXIuZmlsZXMgOiBbXTtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlcyA9ICdmaWxlcycgaW4gZS50YXJnZXQgPyBlLnRhcmdldC5maWxlcyA6IGRhdGFUcmFuc2ZlcjtcblxuICAgICAgICAgICAgLy8gUHJvY2VzcyBzZWxlY3RlZCBpbWFnZXNcbiAgICAgICAgICAgIGlmIChpbWFnZXMgJiYgaW1hZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIEFycmF5LmZyb20oaW1hZ2VzKS5mb3JFYWNoKChjdXJJbWFnZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1ckltYWdlICE9PSAnb2JqZWN0JykgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgaW1hZ2UgZWxlbWVudCBhbmQgbG9hZCBzZWxlY3RlZCBpbWFnZVxuICAgICAgICAgICAgICAgICAgICBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgICAgICAgICBpbWFnZS5zcmMgPSBhdmF0YXIuY3JlYXRlT2JqZWN0VVJMKGN1ckltYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2ltYWdlL3BuZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcHJlc3M6IDkwLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVzaXplIGFuZCBjcm9wIHRoZSBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbXliYXNlNjRyZXNpemVkID0gYXZhdGFyLnJlc2l6ZUNyb3AoYXJncyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBhdmF0YXIgcGljdHVyZSBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGF2YXRhci4kcGljdHVyZS5hdHRyKCdzcmMnLCBteWJhc2U2NHJlc2l6ZWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgZm9ybSB2YWx1ZSBhbmQgdHJpZ2dlciBjaGFuZ2UgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbi4kZm9ybU9iai5mb3JtKCdzZXQgdmFsdWUnLCAndXNlcl9hdmF0YXInLCBteWJhc2U2NHJlc2l6ZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uLiRzaXBfc2VjcmV0LnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gUmVzaXplIGFuZCBjcm9wIHRoZSBpbWFnZVxuICAgIHJlc2l6ZUNyb3Aoe1xuICAgICAgICAgICAgICAgICAgIHNyYywgd2lkdGgsIGhlaWdodCwgdHlwZSwgY29tcHJlc3MsXG4gICAgICAgICAgICAgICB9KSB7XG4gICAgICAgIGxldCBuZXdXaWR0aCA9IHdpZHRoO1xuICAgICAgICBsZXQgbmV3SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBjb25zdCBjcm9wID0gbmV3V2lkdGggPT09IDAgfHwgbmV3SGVpZ2h0ID09PSAwO1xuXG4gICAgICAgIC8vIFNraXAgcmVzaXppbmcgaWYgdGhlIGltYWdlIGlzIHNtYWxsZXIgdGhhbiB0aGUgZGVzaXJlZCBzaXplXG4gICAgICAgIGlmIChzcmMud2lkdGggPD0gbmV3V2lkdGggJiYgbmV3SGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICBuZXdXaWR0aCA9IHNyYy53aWR0aDtcbiAgICAgICAgICAgIG5ld0hlaWdodCA9IHNyYy5oZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWxjdWxhdGUgbmV3IGhlaWdodCB3aGlsZSBtYWludGFpbmluZyBhc3BlY3QgcmF0aW9cbiAgICAgICAgaWYgKHNyYy53aWR0aCA+IG5ld1dpZHRoICYmIG5ld0hlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgbmV3SGVpZ2h0ID0gc3JjLmhlaWdodCAqIChuZXdXaWR0aCAvIHNyYy53aWR0aCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWxjdWxhdGUgc2NhbGUgZmFjdG9yc1xuICAgICAgICBjb25zdCB4c2NhbGUgPSBuZXdXaWR0aCAvIHNyYy53aWR0aDtcbiAgICAgICAgY29uc3QgeXNjYWxlID0gbmV3SGVpZ2h0IC8gc3JjLmhlaWdodDtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBjcm9wID8gTWF0aC5taW4oeHNjYWxlLCB5c2NhbGUpIDogTWF0aC5tYXgoeHNjYWxlLCB5c2NhbGUpO1xuXG4gICAgICAgIC8vIENyZWF0ZSBhbiBlbXB0eSBjYW52YXMgZWxlbWVudFxuICAgICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgY2FudmFzLndpZHRoID0gbmV3V2lkdGggfHwgTWF0aC5yb3VuZChzcmMud2lkdGggKiBzY2FsZSk7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBuZXdIZWlnaHQgfHwgTWF0aC5yb3VuZChzcmMuaGVpZ2h0ICogc2NhbGUpO1xuICAgICAgICBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5zY2FsZShzY2FsZSwgc2NhbGUpO1xuXG4gICAgICAgIC8vIENyb3AgdGhlIGltYWdlIHRvIHRoZSB0b3AgY2VudGVyXG4gICAgICAgIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmRyYXdJbWFnZShzcmMsICgoc3JjLndpZHRoICogc2NhbGUpIC0gY2FudmFzLndpZHRoKSAqIC0wLjUsICgoc3JjLmhlaWdodCAqIHNjYWxlKSAtIGNhbnZhcy5oZWlnaHQpICogLTAuNSk7XG4gICAgICAgIHJldHVybiBjYW52YXMudG9EYXRhVVJMKHR5cGUsIGNvbXByZXNzKTtcbiAgICB9LFxuICAgIGNyZWF0ZU9iamVjdFVSTChpKSB7XG4gICAgICAgIGNvbnN0IFVSTCA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTCB8fCB3aW5kb3cubW96VVJMIHx8IHdpbmRvdy5tc1VSTDtcbiAgICAgICAgcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwoaSk7XG4gICAgfSxcblxufTsiXX0=