"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2021 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global PbxApi, globalTranslate, UserMessage, updatePBX */
var upgradeStatusLoopWorker = {
  timeOut: 1000,
  timeOutHandle: '',
  iterations: 0,
  filename: '',
  initialize: function initialize(filename) {
    upgradeStatusLoopWorker.filename = filename;
    upgradeStatusLoopWorker.iterations = 0;
    upgradeStatusLoopWorker.restartWorker();
  },
  restartWorker: function restartWorker() {
    window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
    upgradeStatusLoopWorker.worker();
  },
  worker: function worker() {
    window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
    PbxApi.FilesFirmwareDownloadStatus(upgradeStatusLoopWorker.filename, upgradeStatusLoopWorker.cbRefreshUpgradeStatus);
  },
  cbRefreshUpgradeStatus: function cbRefreshUpgradeStatus(response) {
    upgradeStatusLoopWorker.iterations += 1;
    upgradeStatusLoopWorker.timeoutHandle = window.setTimeout(upgradeStatusLoopWorker.worker, upgradeStatusLoopWorker.timeOut);
    if (response.length === 0 || response === false) return;

    if (response.d_status === 'DOWNLOAD_IN_PROGRESS') {
      $('i.loading.redo').closest('a').find('.percent').text("".concat(response.d_status_progress, "%"));
    } else if (response.d_status === 'DOWNLOAD_COMPLETE') {
      window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
      $('i.loading.redo').closest('a').find('.percent').text("".concat(response.d_status_progress, "%"));
      $('i.loading.redo').addClass('sync').removeClass('redo');
      PbxApi.SystemUpgrade(response.filePath, updatePBX.cbAfterStartUpdate);
    } else if (response.d_status === 'DOWNLOAD_ERROR') {
      window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
      UserMessage.showMultiString(globalTranslate.upd_DownloadUpgradeError);
      $('i.loading.redo').addClass('redo').removeClass('loading');
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9VcGRhdGUvdXBkYXRlLXN0YXR1cy13b3JrZXIuanMiXSwibmFtZXMiOlsidXBncmFkZVN0YXR1c0xvb3BXb3JrZXIiLCJ0aW1lT3V0IiwidGltZU91dEhhbmRsZSIsIml0ZXJhdGlvbnMiLCJmaWxlbmFtZSIsImluaXRpYWxpemUiLCJyZXN0YXJ0V29ya2VyIiwid2luZG93IiwiY2xlYXJUaW1lb3V0IiwidGltZW91dEhhbmRsZSIsIndvcmtlciIsIlBieEFwaSIsIkZpbGVzRmlybXdhcmVEb3dubG9hZFN0YXR1cyIsImNiUmVmcmVzaFVwZ3JhZGVTdGF0dXMiLCJyZXNwb25zZSIsInNldFRpbWVvdXQiLCJsZW5ndGgiLCJkX3N0YXR1cyIsIiQiLCJjbG9zZXN0IiwiZmluZCIsInRleHQiLCJkX3N0YXR1c19wcm9ncmVzcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJTeXN0ZW1VcGdyYWRlIiwiZmlsZVBhdGgiLCJ1cGRhdGVQQlgiLCJjYkFmdGVyU3RhcnRVcGRhdGUiLCJVc2VyTWVzc2FnZSIsInNob3dNdWx0aVN0cmluZyIsImdsb2JhbFRyYW5zbGF0ZSIsInVwZF9Eb3dubG9hZFVwZ3JhZGVFcnJvciJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBRUEsSUFBTUEsdUJBQXVCLEdBQUc7QUFDL0JDLEVBQUFBLE9BQU8sRUFBRSxJQURzQjtBQUUvQkMsRUFBQUEsYUFBYSxFQUFFLEVBRmdCO0FBRy9CQyxFQUFBQSxVQUFVLEVBQUUsQ0FIbUI7QUFJL0JDLEVBQUFBLFFBQVEsRUFBRSxFQUpxQjtBQUsvQkMsRUFBQUEsVUFMK0Isc0JBS3BCRCxRQUxvQixFQUtWO0FBQ3BCSixJQUFBQSx1QkFBdUIsQ0FBQ0ksUUFBeEIsR0FBbUNBLFFBQW5DO0FBQ0FKLElBQUFBLHVCQUF1QixDQUFDRyxVQUF4QixHQUFxQyxDQUFyQztBQUNBSCxJQUFBQSx1QkFBdUIsQ0FBQ00sYUFBeEI7QUFDQSxHQVQ4QjtBQVUvQkEsRUFBQUEsYUFWK0IsMkJBVWY7QUFDZkMsSUFBQUEsTUFBTSxDQUFDQyxZQUFQLENBQW9CUix1QkFBdUIsQ0FBQ1MsYUFBNUM7QUFDQVQsSUFBQUEsdUJBQXVCLENBQUNVLE1BQXhCO0FBQ0EsR0FiOEI7QUFjL0JBLEVBQUFBLE1BZCtCLG9CQWN0QjtBQUNSSCxJQUFBQSxNQUFNLENBQUNDLFlBQVAsQ0FBb0JSLHVCQUF1QixDQUFDUyxhQUE1QztBQUNBRSxJQUFBQSxNQUFNLENBQUNDLDJCQUFQLENBQW1DWix1QkFBdUIsQ0FBQ0ksUUFBM0QsRUFBcUVKLHVCQUF1QixDQUFDYSxzQkFBN0Y7QUFDQSxHQWpCOEI7QUFrQi9CQSxFQUFBQSxzQkFsQitCLGtDQWtCUkMsUUFsQlEsRUFrQkU7QUFDaENkLElBQUFBLHVCQUF1QixDQUFDRyxVQUF4QixJQUFzQyxDQUF0QztBQUNBSCxJQUFBQSx1QkFBdUIsQ0FBQ1MsYUFBeEIsR0FDQ0YsTUFBTSxDQUFDUSxVQUFQLENBQWtCZix1QkFBdUIsQ0FBQ1UsTUFBMUMsRUFBa0RWLHVCQUF1QixDQUFDQyxPQUExRSxDQUREO0FBRUEsUUFBSWEsUUFBUSxDQUFDRSxNQUFULEtBQW9CLENBQXBCLElBQXlCRixRQUFRLEtBQUssS0FBMUMsRUFBaUQ7O0FBQ2pELFFBQUlBLFFBQVEsQ0FBQ0csUUFBVCxLQUFzQixzQkFBMUIsRUFBa0Q7QUFDakRDLE1BQUFBLENBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CQyxPQUFwQixDQUE0QixHQUE1QixFQUFpQ0MsSUFBakMsQ0FBc0MsVUFBdEMsRUFBa0RDLElBQWxELFdBQTBEUCxRQUFRLENBQUNRLGlCQUFuRTtBQUNBLEtBRkQsTUFFTyxJQUFJUixRQUFRLENBQUNHLFFBQVQsS0FBc0IsbUJBQTFCLEVBQStDO0FBQ3JEVixNQUFBQSxNQUFNLENBQUNDLFlBQVAsQ0FBb0JSLHVCQUF1QixDQUFDUyxhQUE1QztBQUNBUyxNQUFBQSxDQUFDLENBQUMsZ0JBQUQsQ0FBRCxDQUFvQkMsT0FBcEIsQ0FBNEIsR0FBNUIsRUFBaUNDLElBQWpDLENBQXNDLFVBQXRDLEVBQWtEQyxJQUFsRCxXQUEwRFAsUUFBUSxDQUFDUSxpQkFBbkU7QUFDQUosTUFBQUEsQ0FBQyxDQUFDLGdCQUFELENBQUQsQ0FBb0JLLFFBQXBCLENBQTZCLE1BQTdCLEVBQXFDQyxXQUFyQyxDQUFpRCxNQUFqRDtBQUNBYixNQUFBQSxNQUFNLENBQUNjLGFBQVAsQ0FBcUJYLFFBQVEsQ0FBQ1ksUUFBOUIsRUFBd0NDLFNBQVMsQ0FBQ0Msa0JBQWxEO0FBQ0EsS0FMTSxNQUtBLElBQUlkLFFBQVEsQ0FBQ0csUUFBVCxLQUFzQixnQkFBMUIsRUFBNEM7QUFDbERWLE1BQUFBLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQlIsdUJBQXVCLENBQUNTLGFBQTVDO0FBQ0FvQixNQUFBQSxXQUFXLENBQUNDLGVBQVosQ0FBNEJDLGVBQWUsQ0FBQ0Msd0JBQTVDO0FBQ0FkLE1BQUFBLENBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CSyxRQUFwQixDQUE2QixNQUE3QixFQUFxQ0MsV0FBckMsQ0FBaUQsU0FBakQ7QUFDQTtBQUNEO0FBbkM4QixDQUFoQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaWtvUEJYIC0gZnJlZSBwaG9uZSBzeXN0ZW0gZm9yIHNtYWxsIGJ1c2luZXNzXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTctMjAyMSBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgUGJ4QXBpLCBnbG9iYWxUcmFuc2xhdGUsIFVzZXJNZXNzYWdlLCB1cGRhdGVQQlggKi9cblxuY29uc3QgdXBncmFkZVN0YXR1c0xvb3BXb3JrZXIgPSB7XG5cdHRpbWVPdXQ6IDEwMDAsXG5cdHRpbWVPdXRIYW5kbGU6ICcnLFxuXHRpdGVyYXRpb25zOiAwLFxuXHRmaWxlbmFtZTogJycsXG5cdGluaXRpYWxpemUoZmlsZW5hbWUpIHtcblx0XHR1cGdyYWRlU3RhdHVzTG9vcFdvcmtlci5maWxlbmFtZSA9IGZpbGVuYW1lO1xuXHRcdHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLml0ZXJhdGlvbnMgPSAwO1xuXHRcdHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLnJlc3RhcnRXb3JrZXIoKTtcblx0fSxcblx0cmVzdGFydFdvcmtlcigpIHtcblx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLnRpbWVvdXRIYW5kbGUpO1xuXHRcdHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLndvcmtlcigpO1xuXHR9LFxuXHR3b3JrZXIoKSB7XG5cdFx0d2luZG93LmNsZWFyVGltZW91dCh1cGdyYWRlU3RhdHVzTG9vcFdvcmtlci50aW1lb3V0SGFuZGxlKTtcblx0XHRQYnhBcGkuRmlsZXNGaXJtd2FyZURvd25sb2FkU3RhdHVzKHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLmZpbGVuYW1lLCB1cGdyYWRlU3RhdHVzTG9vcFdvcmtlci5jYlJlZnJlc2hVcGdyYWRlU3RhdHVzKTtcblx0fSxcblx0Y2JSZWZyZXNoVXBncmFkZVN0YXR1cyhyZXNwb25zZSkge1xuXHRcdHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLml0ZXJhdGlvbnMgKz0gMTtcblx0XHR1cGdyYWRlU3RhdHVzTG9vcFdvcmtlci50aW1lb3V0SGFuZGxlID1cblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLndvcmtlciwgdXBncmFkZVN0YXR1c0xvb3BXb3JrZXIudGltZU91dCk7XG5cdFx0aWYgKHJlc3BvbnNlLmxlbmd0aCA9PT0gMCB8fCByZXNwb25zZSA9PT0gZmFsc2UpIHJldHVybjtcblx0XHRpZiAocmVzcG9uc2UuZF9zdGF0dXMgPT09ICdET1dOTE9BRF9JTl9QUk9HUkVTUycpIHtcblx0XHRcdCQoJ2kubG9hZGluZy5yZWRvJykuY2xvc2VzdCgnYScpLmZpbmQoJy5wZXJjZW50JykudGV4dChgJHtyZXNwb25zZS5kX3N0YXR1c19wcm9ncmVzc30lYCk7XG5cdFx0fSBlbHNlIGlmIChyZXNwb25zZS5kX3N0YXR1cyA9PT0gJ0RPV05MT0FEX0NPTVBMRVRFJykge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCh1cGdyYWRlU3RhdHVzTG9vcFdvcmtlci50aW1lb3V0SGFuZGxlKTtcblx0XHRcdCQoJ2kubG9hZGluZy5yZWRvJykuY2xvc2VzdCgnYScpLmZpbmQoJy5wZXJjZW50JykudGV4dChgJHtyZXNwb25zZS5kX3N0YXR1c19wcm9ncmVzc30lYCk7XG5cdFx0XHQkKCdpLmxvYWRpbmcucmVkbycpLmFkZENsYXNzKCdzeW5jJykucmVtb3ZlQ2xhc3MoJ3JlZG8nKTtcblx0XHRcdFBieEFwaS5TeXN0ZW1VcGdyYWRlKHJlc3BvbnNlLmZpbGVQYXRoLCB1cGRhdGVQQlguY2JBZnRlclN0YXJ0VXBkYXRlKTtcblx0XHR9IGVsc2UgaWYgKHJlc3BvbnNlLmRfc3RhdHVzID09PSAnRE9XTkxPQURfRVJST1InKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLnRpbWVvdXRIYW5kbGUpO1xuXHRcdFx0VXNlck1lc3NhZ2Uuc2hvd011bHRpU3RyaW5nKGdsb2JhbFRyYW5zbGF0ZS51cGRfRG93bmxvYWRVcGdyYWRlRXJyb3IpO1xuXHRcdFx0JCgnaS5sb2FkaW5nLnJlZG8nKS5hZGRDbGFzcygncmVkbycpLnJlbW92ZUNsYXNzKCdsb2FkaW5nJyk7XG5cdFx0fVxuXHR9LFxufTsiXX0=