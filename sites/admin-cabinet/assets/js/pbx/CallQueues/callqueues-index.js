"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, SemanticLocalization */

/**
 * callQueuesTable module.
 *
 *  Define an object for managing call queue tables
 * @module callQueuesTable
 */
var callQueuesTable = {
  $queuesTable: $('#queues-table'),

  /**
   * Initialize the call queue table handlers and DataTable.
   */
  initialize: function initialize() {
    // Add a double-click handler to each cell in the queue row.
    // This will redirect the user to the modify page for the clicked call queue.
    $('.queue-row td').on('dblclick', function (e) {
      var id = $(e.target).closest('tr').attr('id');
      window.location = "".concat(globalRootUrl, "call-queues/modify/").concat(id);
    }); // Initialize the data table for the call queues table.

    callQueuesTable.initializeDataTable();
  },

  /**
   * Initialize the DataTable for the call queues table.
   * This adds additional functionality like sorting and pagination.
   */
  initializeDataTable: function initializeDataTable() {
    // Initialize DataTable on $queuesTable element with custom settings
    callQueuesTable.$queuesTable.DataTable({
      lengthChange: false,
      // Disable user to change records per page
      paging: false,
      // Disable pagination
      // Define the characteristics of each column in the table
      columns: [null, null, null, null, {
        orderable: false,
        // This column is not orderable
        searchable: false // This column is not searchable

      }],
      order: [1, 'asc'],
      // By default, order by the second column ascending
      language: SemanticLocalization.dataTableLocalisation // Set localisation options

    }); // Move the "add new" button to the first eight column div

    $('#add-new-button').appendTo($('div.eight.column:eq(0)'));
  }
}; // Initialize the call queue table management object when the document is ready

$(document).ready(function () {
  callQueuesTable.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9DYWxsUXVldWVzL2NhbGxxdWV1ZXMtaW5kZXguanMiXSwibmFtZXMiOlsiY2FsbFF1ZXVlc1RhYmxlIiwiJHF1ZXVlc1RhYmxlIiwiJCIsImluaXRpYWxpemUiLCJvbiIsImUiLCJpZCIsInRhcmdldCIsImNsb3Nlc3QiLCJhdHRyIiwid2luZG93IiwibG9jYXRpb24iLCJnbG9iYWxSb290VXJsIiwiaW5pdGlhbGl6ZURhdGFUYWJsZSIsIkRhdGFUYWJsZSIsImxlbmd0aENoYW5nZSIsInBhZ2luZyIsImNvbHVtbnMiLCJvcmRlcmFibGUiLCJzZWFyY2hhYmxlIiwib3JkZXIiLCJsYW5ndWFnZSIsIlNlbWFudGljTG9jYWxpemF0aW9uIiwiZGF0YVRhYmxlTG9jYWxpc2F0aW9uIiwiYXBwZW5kVG8iLCJkb2N1bWVudCIsInJlYWR5Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUEsZUFBZSxHQUFHO0FBQ3BCQyxFQUFBQSxZQUFZLEVBQUVDLENBQUMsQ0FBQyxlQUFELENBREs7O0FBR3BCO0FBQ0o7QUFDQTtBQUNJQyxFQUFBQSxVQU5vQix3QkFNUDtBQUVUO0FBQ0E7QUFDQUQsSUFBQUEsQ0FBQyxDQUFDLGVBQUQsQ0FBRCxDQUFtQkUsRUFBbkIsQ0FBc0IsVUFBdEIsRUFBa0MsVUFBQ0MsQ0FBRCxFQUFPO0FBQ3JDLFVBQU1DLEVBQUUsR0FBR0osQ0FBQyxDQUFDRyxDQUFDLENBQUNFLE1BQUgsQ0FBRCxDQUFZQyxPQUFaLENBQW9CLElBQXBCLEVBQTBCQyxJQUExQixDQUErQixJQUEvQixDQUFYO0FBQ0FDLE1BQUFBLE1BQU0sQ0FBQ0MsUUFBUCxhQUFxQkMsYUFBckIsZ0NBQXdETixFQUF4RDtBQUNILEtBSEQsRUFKUyxDQVNUOztBQUNBTixJQUFBQSxlQUFlLENBQUNhLG1CQUFoQjtBQUNILEdBakJtQjs7QUFrQnBCO0FBQ0o7QUFDQTtBQUNBO0FBQ0lBLEVBQUFBLG1CQXRCb0IsaUNBc0JFO0FBRWxCO0FBQ0FiLElBQUFBLGVBQWUsQ0FBQ0MsWUFBaEIsQ0FBNkJhLFNBQTdCLENBQXVDO0FBQ25DQyxNQUFBQSxZQUFZLEVBQUUsS0FEcUI7QUFDYjtBQUN0QkMsTUFBQUEsTUFBTSxFQUFFLEtBRjJCO0FBRXBCO0FBRWY7QUFDQUMsTUFBQUEsT0FBTyxFQUFFLENBQ0wsSUFESyxFQUVMLElBRkssRUFHTCxJQUhLLEVBSUwsSUFKSyxFQUtMO0FBQ0lDLFFBQUFBLFNBQVMsRUFBRSxLQURmO0FBQ3VCO0FBQ25CQyxRQUFBQSxVQUFVLEVBQUUsS0FGaEIsQ0FFdUI7O0FBRnZCLE9BTEssQ0FMMEI7QUFlbkNDLE1BQUFBLEtBQUssRUFBRSxDQUFDLENBQUQsRUFBSSxLQUFKLENBZjRCO0FBZWY7QUFDcEJDLE1BQUFBLFFBQVEsRUFBRUMsb0JBQW9CLENBQUNDLHFCQWhCSSxDQWdCbUI7O0FBaEJuQixLQUF2QyxFQUhrQixDQXNCbEI7O0FBQ0FyQixJQUFBQSxDQUFDLENBQUMsaUJBQUQsQ0FBRCxDQUFxQnNCLFFBQXJCLENBQThCdEIsQ0FBQyxDQUFDLHdCQUFELENBQS9CO0FBQ0g7QUE5Q21CLENBQXhCLEMsQ0FpREE7O0FBQ0FBLENBQUMsQ0FBQ3VCLFFBQUQsQ0FBRCxDQUFZQyxLQUFaLENBQWtCLFlBQU07QUFDcEIxQixFQUFBQSxlQUFlLENBQUNHLFVBQWhCO0FBQ0gsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaWtvUEJYIC0gZnJlZSBwaG9uZSBzeXN0ZW0gZm9yIHNtYWxsIGJ1c2luZXNzXG4gKiBDb3B5cmlnaHQgwqkgMjAxNy0yMDIzIEFsZXhleSBQb3J0bm92IGFuZCBOaWtvbGF5IEJla2V0b3ZcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uXG4gKiBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG4vKiBnbG9iYWwgZ2xvYmFsUm9vdFVybCwgU2VtYW50aWNMb2NhbGl6YXRpb24gKi9cblxuLyoqXG4gKiBjYWxsUXVldWVzVGFibGUgbW9kdWxlLlxuICpcbiAqICBEZWZpbmUgYW4gb2JqZWN0IGZvciBtYW5hZ2luZyBjYWxsIHF1ZXVlIHRhYmxlc1xuICogQG1vZHVsZSBjYWxsUXVldWVzVGFibGVcbiAqL1xuY29uc3QgY2FsbFF1ZXVlc1RhYmxlID0ge1xuICAgICRxdWV1ZXNUYWJsZTogJCgnI3F1ZXVlcy10YWJsZScpLFxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSB0aGUgY2FsbCBxdWV1ZSB0YWJsZSBoYW5kbGVycyBhbmQgRGF0YVRhYmxlLlxuICAgICAqL1xuICAgIGluaXRpYWxpemUoKSB7XG5cbiAgICAgICAgLy8gQWRkIGEgZG91YmxlLWNsaWNrIGhhbmRsZXIgdG8gZWFjaCBjZWxsIGluIHRoZSBxdWV1ZSByb3cuXG4gICAgICAgIC8vIFRoaXMgd2lsbCByZWRpcmVjdCB0aGUgdXNlciB0byB0aGUgbW9kaWZ5IHBhZ2UgZm9yIHRoZSBjbGlja2VkIGNhbGwgcXVldWUuXG4gICAgICAgICQoJy5xdWV1ZS1yb3cgdGQnKS5vbignZGJsY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaWQgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCd0cicpLmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBgJHtnbG9iYWxSb290VXJsfWNhbGwtcXVldWVzL21vZGlmeS8ke2lkfWA7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhlIGRhdGEgdGFibGUgZm9yIHRoZSBjYWxsIHF1ZXVlcyB0YWJsZS5cbiAgICAgICAgY2FsbFF1ZXVlc1RhYmxlLmluaXRpYWxpemVEYXRhVGFibGUoKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhlIERhdGFUYWJsZSBmb3IgdGhlIGNhbGwgcXVldWVzIHRhYmxlLlxuICAgICAqIFRoaXMgYWRkcyBhZGRpdGlvbmFsIGZ1bmN0aW9uYWxpdHkgbGlrZSBzb3J0aW5nIGFuZCBwYWdpbmF0aW9uLlxuICAgICAqL1xuICAgIGluaXRpYWxpemVEYXRhVGFibGUoKSB7XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBEYXRhVGFibGUgb24gJHF1ZXVlc1RhYmxlIGVsZW1lbnQgd2l0aCBjdXN0b20gc2V0dGluZ3NcbiAgICAgICAgY2FsbFF1ZXVlc1RhYmxlLiRxdWV1ZXNUYWJsZS5EYXRhVGFibGUoe1xuICAgICAgICAgICAgbGVuZ3RoQ2hhbmdlOiBmYWxzZSwgIC8vIERpc2FibGUgdXNlciB0byBjaGFuZ2UgcmVjb3JkcyBwZXIgcGFnZVxuICAgICAgICAgICAgcGFnaW5nOiBmYWxzZSwgLy8gRGlzYWJsZSBwYWdpbmF0aW9uXG5cbiAgICAgICAgICAgIC8vIERlZmluZSB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIGVhY2ggY29sdW1uIGluIHRoZSB0YWJsZVxuICAgICAgICAgICAgY29sdW1uczogW1xuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBvcmRlcmFibGU6IGZhbHNlLCAgLy8gVGhpcyBjb2x1bW4gaXMgbm90IG9yZGVyYWJsZVxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hhYmxlOiBmYWxzZSAgLy8gVGhpcyBjb2x1bW4gaXMgbm90IHNlYXJjaGFibGVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG9yZGVyOiBbMSwgJ2FzYyddLCAgLy8gQnkgZGVmYXVsdCwgb3JkZXIgYnkgdGhlIHNlY29uZCBjb2x1bW4gYXNjZW5kaW5nXG4gICAgICAgICAgICBsYW5ndWFnZTogU2VtYW50aWNMb2NhbGl6YXRpb24uZGF0YVRhYmxlTG9jYWxpc2F0aW9uLCAvLyBTZXQgbG9jYWxpc2F0aW9uIG9wdGlvbnNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gTW92ZSB0aGUgXCJhZGQgbmV3XCIgYnV0dG9uIHRvIHRoZSBmaXJzdCBlaWdodCBjb2x1bW4gZGl2XG4gICAgICAgICQoJyNhZGQtbmV3LWJ1dHRvbicpLmFwcGVuZFRvKCQoJ2Rpdi5laWdodC5jb2x1bW46ZXEoMCknKSk7XG4gICAgfSxcbn07XG5cbi8vIEluaXRpYWxpemUgdGhlIGNhbGwgcXVldWUgdGFibGUgbWFuYWdlbWVudCBvYmplY3Qgd2hlbiB0aGUgZG9jdW1lbnQgaXMgcmVhZHlcbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcbiAgICBjYWxsUXVldWVzVGFibGUuaW5pdGlhbGl6ZSgpO1xufSk7XG5cbiJdfQ==