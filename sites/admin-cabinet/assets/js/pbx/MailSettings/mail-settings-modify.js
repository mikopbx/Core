"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl,globalTranslate, Form, PbxApi, UserMessage */

/**
 * Object for managing mail settings
 *
 * @module mailSettings
 */
var mailSettings = {
  /**
   * jQuery object for the form.
   * @type {jQuery}
   */
  $formObj: $('#mail-settings-form'),

  /**
   * jQuery object for the checkboxes.
   * @type {jQuery}
   */
  $checkBoxes: $('#mail-settings-form .checkbox'),

  /**
   * jQuery object for the menu items.
   * @type {jQuery}
   */
  $menuItems: $('#mail-settings-menu .item'),

  /**
   * Validation rules for the form fields before submission.
   *
   * @type {object}
   */
  validateRules: {
    name: {
      identifier: 'name',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.cq_ValidateNameEmpty
      }]
    }
  },
  // Initialize the mail settings page.
  initialize: function initialize() {
    mailSettings.$menuItems.tab();
    mailSettings.$checkBoxes.checkbox();
    mailSettings.initializeForm();
  },

  /**
   * Callback function after updating mail settings.
   * @param {Object} response - The response object from the server.
   */
  updateMailSettingsCallback: function updateMailSettingsCallback(response) {
    if (response.result === true) {
      mailSettings.$formObj.after("<div class=\"ui success message ajax\">".concat(globalTranslate.ms_TestEmailSubject, "</div>"));
      var testEmail = mailSettings.$formObj.form('get value', 'SystemNotificationsEmail');

      if (testEmail.length > 0) {
        var params = {
          email: testEmail,
          subject: globalTranslate.ms_TestEmailSubject,
          body: globalTranslate.ms_TestEmailBody,
          encode: ''
        };
        PbxApi.SendTestEmail(params, mailSettings.cbAfterEmailSend);
      }
    }
  },

  /**
   * Callback function after sending a test email.
   * @param {string|boolean} message - The message or result from the server.
   */
  cbAfterEmailSend: function cbAfterEmailSend(message) {
    if (message === true) {
      UserMessage.showInformation(globalTranslate.ms_TestEmailSentSuccessfully);
    } else if (message.length > 0) {
      UserMessage.showMultiString(message);
    }
  },

  /**
   * Callback function to be called before the form is sent
   * @param {Object} settings - The current settings of the form
   * @returns {Object} - The updated settings of the form
   */
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = mailSettings.$formObj.form('get values');
    return result;
  },

  /**
   * Callback function to be called after the form has been sent.
   * @param {Object} response - The response from the server after the form is sent
   */
  cbAfterSendForm: function cbAfterSendForm(response) {
    if (response.success === true) {
      PbxApi.UpdateMailSettings(mailSettings.updateMailSettingsCallback);
    }
  },

  /**
   * Initialize the form with custom settings
   */
  initializeForm: function initializeForm() {
    Form.$formObj = mailSettings.$formObj;
    Form.url = "".concat(globalRootUrl, "mail-settings/save"); // Form submission URL

    Form.validateRules = mailSettings.validateRules; // Form validation rules

    Form.cbBeforeSendForm = mailSettings.cbBeforeSendForm; // Callback before form is sent

    Form.cbAfterSendForm = mailSettings.cbAfterSendForm; // Callback after form is sent

    Form.initialize();
  }
};
/**
 *  Initialize mail settings form on document ready
 */

$(document).ready(function () {
  mailSettings.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9NYWlsU2V0dGluZ3MvbWFpbC1zZXR0aW5ncy1tb2RpZnkuanMiXSwibmFtZXMiOlsibWFpbFNldHRpbmdzIiwiJGZvcm1PYmoiLCIkIiwiJGNoZWNrQm94ZXMiLCIkbWVudUl0ZW1zIiwidmFsaWRhdGVSdWxlcyIsIm5hbWUiLCJpZGVudGlmaWVyIiwicnVsZXMiLCJ0eXBlIiwicHJvbXB0IiwiZ2xvYmFsVHJhbnNsYXRlIiwiY3FfVmFsaWRhdGVOYW1lRW1wdHkiLCJpbml0aWFsaXplIiwidGFiIiwiY2hlY2tib3giLCJpbml0aWFsaXplRm9ybSIsInVwZGF0ZU1haWxTZXR0aW5nc0NhbGxiYWNrIiwicmVzcG9uc2UiLCJyZXN1bHQiLCJhZnRlciIsIm1zX1Rlc3RFbWFpbFN1YmplY3QiLCJ0ZXN0RW1haWwiLCJmb3JtIiwibGVuZ3RoIiwicGFyYW1zIiwiZW1haWwiLCJzdWJqZWN0IiwiYm9keSIsIm1zX1Rlc3RFbWFpbEJvZHkiLCJlbmNvZGUiLCJQYnhBcGkiLCJTZW5kVGVzdEVtYWlsIiwiY2JBZnRlckVtYWlsU2VuZCIsIm1lc3NhZ2UiLCJVc2VyTWVzc2FnZSIsInNob3dJbmZvcm1hdGlvbiIsIm1zX1Rlc3RFbWFpbFNlbnRTdWNjZXNzZnVsbHkiLCJzaG93TXVsdGlTdHJpbmciLCJjYkJlZm9yZVNlbmRGb3JtIiwic2V0dGluZ3MiLCJkYXRhIiwiY2JBZnRlclNlbmRGb3JtIiwic3VjY2VzcyIsIlVwZGF0ZU1haWxTZXR0aW5ncyIsIkZvcm0iLCJ1cmwiLCJnbG9iYWxSb290VXJsIiwiZG9jdW1lbnQiLCJyZWFkeSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxZQUFZLEdBQUc7QUFDakI7QUFDSjtBQUNBO0FBQ0E7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QUFBLGNBbkdpQiw0QkFtR0E7QUFDYjZCLElBQUFBLElBQUksQ0FBQzVDLFFBQUwsR0FBZ0JELFlBQVksQ0FBQ0MsUUFBN0I7QUFDQTRDLElBQUFBLElBQUksQ0FBQ0MsR0FBTCxhQUFjQyxhQUFkLHdCQUZhLENBRW9DOztBQUNqREYsSUFBQUEsSUFBSSxDQUFDeEMsYUFBTCxHQUFxQkwsWUFBWSxDQUFDSyxhQUFsQyxDQUhhLENBR29DOztBQUNqRHdDLElBQUFBLElBQUksQ0FBQ04sZ0JBQUwsR0FBd0J2QyxZQUFZLENBQUN1QyxnQkFBckMsQ0FKYSxDQUkwQzs7QUFDdkRNLElBQUFBLElBQUksQ0FBQ0gsZUFBTCxHQUF1QjFDLFlBQVksQ0FBQzBDLGVBQXBDLENBTGEsQ0FLd0M7O0FBQ3JERyxJQUFBQSxJQUFJLENBQUNoQyxVQUFMO0FBQ0g7QUExR2dCLENBQXJCO0FBNkdBO0FBQ0E7QUFDQTs7QUFDQVgsQ0FBQyxDQUFDOEMsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUNwQmpELEVBQUFBLFlBQVksQ0FBQ2EsVUFBYjtBQUNILENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IMKpIDIwMTctMjAyMyBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgZ2xvYmFsUm9vdFVybCxnbG9iYWxUcmFuc2xhdGUsIEZvcm0sIFBieEFwaSwgVXNlck1lc3NhZ2UgKi9cblxuXG4vKipcbiAqIE9iamVjdCBmb3IgbWFuYWdpbmcgbWFpbCBzZXR0aW5nc1xuICpcbiAqIEBtb2R1bGUgbWFpbFNldHRpbmdzXG4gKi9cbmNvbnN0IG1haWxTZXR0aW5ncyA9IHtcbiAgICAvKipcbiAgICAgKiBqUXVlcnkgb2JqZWN0IGZvciB0aGUgZm9ybS5cbiAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAqL1xuICAgICRmb3JtT2JqOiAkKCcjbWFpbC1zZXR0aW5ncy1mb3JtJyksXG5cbiAgICAvKipcbiAgICAgKiBqUXVlcnkgb2JqZWN0IGZvciB0aGUgY2hlY2tib3hlcy5cbiAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAqL1xuICAgICRjaGVja0JveGVzOiAkKCcjbWFpbC1zZXR0aW5ncy1mb3JtIC5jaGVja2JveCcpLFxuXG4gICAgLyoqXG4gICAgICogalF1ZXJ5IG9iamVjdCBmb3IgdGhlIG1lbnUgaXRlbXMuXG4gICAgICogQHR5cGUge2pRdWVyeX1cbiAgICAgKi9cbiAgICAkbWVudUl0ZW1zOiAkKCcjbWFpbC1zZXR0aW5ncy1tZW51IC5pdGVtJyksXG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0aW9uIHJ1bGVzIGZvciB0aGUgZm9ybSBmaWVsZHMgYmVmb3JlIHN1Ym1pc3Npb24uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqL1xuICAgIHZhbGlkYXRlUnVsZXM6IHtcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ25hbWUnLFxuICAgICAgICAgICAgcnVsZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlbXB0eScsXG4gICAgICAgICAgICAgICAgICAgIHByb21wdDogZ2xvYmFsVHJhbnNsYXRlLmNxX1ZhbGlkYXRlTmFtZUVtcHR5LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBtYWlsIHNldHRpbmdzIHBhZ2UuXG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgbWFpbFNldHRpbmdzLiRtZW51SXRlbXMudGFiKCk7XG4gICAgICAgIG1haWxTZXR0aW5ncy4kY2hlY2tCb3hlcy5jaGVja2JveCgpO1xuICAgICAgICBtYWlsU2V0dGluZ3MuaW5pdGlhbGl6ZUZvcm0oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZnVuY3Rpb24gYWZ0ZXIgdXBkYXRpbmcgbWFpbCBzZXR0aW5ncy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgLSBUaGUgcmVzcG9uc2Ugb2JqZWN0IGZyb20gdGhlIHNlcnZlci5cbiAgICAgKi9cbiAgICB1cGRhdGVNYWlsU2V0dGluZ3NDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2UucmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBtYWlsU2V0dGluZ3MuJGZvcm1PYmouYWZ0ZXIoYDxkaXYgY2xhc3M9XCJ1aSBzdWNjZXNzIG1lc3NhZ2UgYWpheFwiPiR7Z2xvYmFsVHJhbnNsYXRlLm1zX1Rlc3RFbWFpbFN1YmplY3R9PC9kaXY+YCk7XG4gICAgICAgICAgICBjb25zdCB0ZXN0RW1haWwgPSBtYWlsU2V0dGluZ3MuJGZvcm1PYmouZm9ybSgnZ2V0IHZhbHVlJywgJ1N5c3RlbU5vdGlmaWNhdGlvbnNFbWFpbCcpO1xuICAgICAgICAgICAgaWYgKHRlc3RFbWFpbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICBlbWFpbDogdGVzdEVtYWlsLFxuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0OiBnbG9iYWxUcmFuc2xhdGUubXNfVGVzdEVtYWlsU3ViamVjdCxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogZ2xvYmFsVHJhbnNsYXRlLm1zX1Rlc3RFbWFpbEJvZHksXG4gICAgICAgICAgICAgICAgICAgIGVuY29kZTogJycsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBQYnhBcGkuU2VuZFRlc3RFbWFpbChwYXJhbXMsIG1haWxTZXR0aW5ncy5jYkFmdGVyRW1haWxTZW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBmdW5jdGlvbiBhZnRlciBzZW5kaW5nIGEgdGVzdCBlbWFpbC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xib29sZWFufSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2Ugb3IgcmVzdWx0IGZyb20gdGhlIHNlcnZlci5cbiAgICAgKi9cbiAgICBjYkFmdGVyRW1haWxTZW5kKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgIFVzZXJNZXNzYWdlLnNob3dJbmZvcm1hdGlvbihnbG9iYWxUcmFuc2xhdGUubXNfVGVzdEVtYWlsU2VudFN1Y2Nlc3NmdWxseSk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBVc2VyTWVzc2FnZS5zaG93TXVsdGlTdHJpbmcobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGJlZm9yZSB0aGUgZm9ybSBpcyBzZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzIC0gVGhlIGN1cnJlbnQgc2V0dGluZ3Mgb2YgdGhlIGZvcm1cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIFRoZSB1cGRhdGVkIHNldHRpbmdzIG9mIHRoZSBmb3JtXG4gICAgICovXG4gICAgY2JCZWZvcmVTZW5kRm9ybShzZXR0aW5ncykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzZXR0aW5ncztcbiAgICAgICAgcmVzdWx0LmRhdGEgPSBtYWlsU2V0dGluZ3MuJGZvcm1PYmouZm9ybSgnZ2V0IHZhbHVlcycpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYWZ0ZXIgdGhlIGZvcm0gaGFzIGJlZW4gc2VudC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgLSBUaGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyIGFmdGVyIHRoZSBmb3JtIGlzIHNlbnRcbiAgICAgKi9cbiAgICBjYkFmdGVyU2VuZEZvcm0ocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MgPT09IHRydWUpIHtcbiAgICAgICAgICAgIFBieEFwaS5VcGRhdGVNYWlsU2V0dGluZ3MobWFpbFNldHRpbmdzLnVwZGF0ZU1haWxTZXR0aW5nc0NhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHRoZSBmb3JtIHdpdGggY3VzdG9tIHNldHRpbmdzXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZUZvcm0oKSB7XG4gICAgICAgIEZvcm0uJGZvcm1PYmogPSBtYWlsU2V0dGluZ3MuJGZvcm1PYmo7XG4gICAgICAgIEZvcm0udXJsID0gYCR7Z2xvYmFsUm9vdFVybH1tYWlsLXNldHRpbmdzL3NhdmVgOyAvLyBGb3JtIHN1Ym1pc3Npb24gVVJMXG4gICAgICAgIEZvcm0udmFsaWRhdGVSdWxlcyA9IG1haWxTZXR0aW5ncy52YWxpZGF0ZVJ1bGVzOyAvLyBGb3JtIHZhbGlkYXRpb24gcnVsZXNcbiAgICAgICAgRm9ybS5jYkJlZm9yZVNlbmRGb3JtID0gbWFpbFNldHRpbmdzLmNiQmVmb3JlU2VuZEZvcm07IC8vIENhbGxiYWNrIGJlZm9yZSBmb3JtIGlzIHNlbnRcbiAgICAgICAgRm9ybS5jYkFmdGVyU2VuZEZvcm0gPSBtYWlsU2V0dGluZ3MuY2JBZnRlclNlbmRGb3JtOyAvLyBDYWxsYmFjayBhZnRlciBmb3JtIGlzIHNlbnRcbiAgICAgICAgRm9ybS5pbml0aWFsaXplKCk7XG4gICAgfSxcbn07XG5cbi8qKlxuICogIEluaXRpYWxpemUgbWFpbCBzZXR0aW5ncyBmb3JtIG9uIGRvY3VtZW50IHJlYWR5XG4gKi9cbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcbiAgICBtYWlsU2V0dGluZ3MuaW5pdGlhbGl6ZSgpO1xufSk7XG4iXX0=