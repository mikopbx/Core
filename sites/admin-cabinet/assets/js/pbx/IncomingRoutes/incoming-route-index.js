"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl,globalTranslate, Extensions, Form */
// Если выбран вариант переадресации на номер, а сам номер не выбран
//
$.fn.form.settings.rules.extensionRule = function (value) {
  if ($('#action').val() === 'extension' && (value === -1 || value === '')) {
    return false;
  }

  return true;
};

var incomingRoutes = {
  $formObj: $('#default-rule-form'),
  $actionDropdown: $('#action'),
  validateRules: {
    extension: {
      identifier: 'extension',
      rules: [{
        type: 'extensionRule',
        prompt: globalTranslate.ir_ValidateForwardingToBeFilled
      }]
    }
  },
  initialize: function initialize() {
    $('#routingTable').tableDnD({
      onDrop: incomingRoutes.cbOnDrop,
      onDragClass: 'hoveringRow',
      dragHandle: '.dragHandle'
    });
    incomingRoutes.$actionDropdown.dropdown({
      onChange: incomingRoutes.toggleDisabledFieldClass
    });
    incomingRoutes.toggleDisabledFieldClass();
    incomingRoutes.initializeForm();
    $('.forwarding-select').dropdown(Extensions.getDropdownSettingsForRouting());
    $('.rule-row td').on('dblclick', function (e) {
      var id = $(e.target).closest('tr').attr('id');
      window.location = "".concat(globalRootUrl, "incoming-routes/modify/").concat(id);
    });
  },
  cbOnDrop: function cbOnDrop() {
    var priorityWasChanged = false;
    var priorityData = {};
    $('.rule-row').each(function (index, obj) {
      var ruleId = $(obj).attr('id');
      var oldPriority = parseInt($(obj).attr('data-value'), 10);
      var newPriority = obj.rowIndex;

      if (oldPriority !== newPriority) {
        priorityWasChanged = true;
        priorityData[ruleId] = newPriority;
      }
    });

    if (priorityWasChanged) {
      $.api({
        on: 'now',
        url: "".concat(globalRootUrl, "incoming-routes/changePriority"),
        method: 'POST',
        data: priorityData
      });
    }
  },
  toggleDisabledFieldClass: function toggleDisabledFieldClass() {
    if (incomingRoutes.$formObj.form('get value', 'action') === 'extension') {
      $('#extension-group').show();
    } else {
      $('#extension-group').hide();
      $('#extension').dropdown('clear');
    }
  },
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = incomingRoutes.$formObj.form('get values');
    return result;
  },
  cbAfterSendForm: function cbAfterSendForm() {},
  initializeForm: function initializeForm() {
    Form.$formObj = incomingRoutes.$formObj;
    Form.url = "".concat(globalRootUrl, "incoming-routes/save");
    Form.validateRules = incomingRoutes.validateRules;
    Form.cbBeforeSendForm = incomingRoutes.cbBeforeSendForm;
    Form.cbAfterSendForm = incomingRoutes.cbAfterSendForm;
    Form.initialize();
  }
};
$(document).ready(function () {
  incomingRoutes.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,