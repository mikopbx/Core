"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, globalTranslate, Form, PbxApi, clockWorker */

/**
 * Object for managing time settings.
 *
 * @module timeSettings
 */
var timeSettings = {
  /**
   * jQuery object for the form.
   * @type {jQuery}
   */
  $formObj: $('#time-settings-form'),

  /**
   * Validation rules for the form fields before submission.
   *
   * @type {object}
   */
  validateRules: {
    CurrentDateTime: {
      depends: 'PBXManualTimeSettings',
      identifier: 'ManualDateTime',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.ts_ValidateDateTime
      }]
    }
  },

  /**
   * Initializes the time settings.
   */
  initialize: function initialize() {
    $('#PBXTimezone').dropdown({
      fullTextSearch: true
    });
    $('#time-settings-form .checkbox').checkbox({
      onChange: function onChange() {
        timeSettings.toggleDisabledFieldClass();
      }
    });
    timeSettings.initializeForm();
    timeSettings.toggleDisabledFieldClass();
  },

  /**
   * Toggles the disabled field class based on the selected time setting.
   */
  toggleDisabledFieldClass: function toggleDisabledFieldClass() {
    if (timeSettings.$formObj.form('get value', 'PBXManualTimeSettings') === 'on') {
      $('#SetDateTimeBlock').removeClass('disabled');
      $('#SetNtpServerBlock').addClass('disabled');
    } else {
      $('#SetNtpServerBlock').removeClass('disabled');
      $('#SetDateTimeBlock').addClass('disabled');
      clockWorker.restartWorker();
    }
  },

  /**
   * Callback function to be called before the form is sent
   * @param {Object} settings - The current settings of the form
   * @returns {Object} - The updated settings of the form
   */
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = timeSettings.$formObj.form('get values');
    return result;
  },

  /**
   * Callback function to be called after the form has been sent.
   * @param {Object} response - The response from the server after the form is sent
   */
  cbAfterSendForm: function cbAfterSendForm(response) {
    if (timeSettings.$formObj.form('get value', 'PBXManualTimeSettings') === 'on') {
      var manualDate = timeSettings.$formObj.form('get value', 'ManualDateTime');
      var timestamp = Date.parse("".concat(manualDate)) / 1000;
      var userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
      PbxApi.UpdateDateTime({
        timestamp: timestamp,
        userTimeZone: userTimeZone
      });
    }
  },

  /**
   * Initialize the form with custom settings
   */
  initializeForm: function initializeForm() {
    Form.$formObj = timeSettings.$formObj;
    Form.url = "".concat(globalRootUrl, "time-settings/save"); // Form submission URL

    Form.validateRules = timeSettings.validateRules; // Form validation rules

    Form.cbBeforeSendForm = timeSettings.cbBeforeSendForm; // Callback before form is sent

    Form.cbAfterSendForm = timeSettings.cbAfterSendForm; // Callback after form is sent

    Form.initialize();
  }
}; // When the document is ready, initialize the time settings form

$(document).ready(function () {
  timeSettings.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UaW1lU2V0dGluZ3MvdGltZS1zZXR0aW5ncy1tb2RpZnkuanMiXSwibmFtZXMiOlsidGltZVNldHRpbmdzIiwiJGZvcm1PYmoiLCIkIiwidmFsaWRhdGVSdWxlcyIsIkN1cnJlbnREYXRlVGltZSIsImRlcGVuZHMiLCJpZGVudGlmaWVyIiwicnVsZXMiLCJ0eXBlIiwicHJvbXB0IiwiZ2xvYmFsVHJhbnNsYXRlIiwidHNfVmFsaWRhdGVEYXRlVGltZSIsImluaXRpYWxpemUiLCJkcm9wZG93biIsImZ1bGxUZXh0U2VhcmNoIiwiY2hlY2tib3giLCJvbkNoYW5nZSIsInRvZ2dsZURpc2FibGVkRmllbGRDbGFzcyIsImluaXRpYWxpemVGb3JtIiwiZm9ybSIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJjbG9ja1dvcmtlciIsInJlc3RhcnRXb3JrZXIiLCJjYkJlZm9yZVNlbmRGb3JtIiwic2V0dGluZ3MiLCJyZXN1bHQiLCJkYXRhIiwiY2JBZnRlclNlbmRGb3JtIiwicmVzcG9uc2UiLCJtYW51YWxEYXRlIiwidGltZXN0YW1wIiwiRGF0ZSIsInBhcnNlIiwidXNlclRpbWVab25lIiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwicmVzb2x2ZWRPcHRpb25zIiwidGltZVpvbmUiLCJQYnhBcGkiLCJVcGRhdGVEYXRlVGltZSIsIkZvcm0iLCJ1cmwiLCJnbG9iYWxSb290VXJsIiwiZG9jdW1lbnQiLCJyZWFkeSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxZQUFZLEdBQUc7QUFFakI7QUFDSjtBQUNBO0FBQ0E7QUFDSUMsRUFBQUEsUUFBUSxFQUFFQyxDQUFDLENBQUMscUJBQUQsQ0FOTTs7QUFRakI7QUFDSjtBQUNBO0FBQ0E7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LENBRW9DOztBQUNqREYsSUFBQUEsSUFBSSxDQUFDdEMsYUFBTCxHQUFxQkgsWUFBWSxDQUFDRyxhQUFsQyxDQUhhLENBR29DOztBQUNqRHNDLElBQUFBLElBQUksQ0FBQ2pCLGdCQUFMLEdBQXdCeEIsWUFBWSxDQUFDd0IsZ0JBQXJDLENBSmEsQ0FJMEM7O0FBQ3ZEaUIsSUFBQUEsSUFBSSxDQUFDYixlQUFMLEdBQXVCNUIsWUFBWSxDQUFDNEIsZUFBcEMsQ0FMYSxDQUt3Qzs7QUFDckRhLElBQUFBLElBQUksQ0FBQzdCLFVBQUw7QUFDSDtBQTNGZ0IsQ0FBckIsQyxDQThGQTs7QUFDQVYsQ0FBQyxDQUFDMEMsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUNwQjdDLEVBQUFBLFlBQVksQ0FBQ1ksVUFBYjtBQUNILENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IMKpIDIwMTctMjAyMyBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgZ2xvYmFsUm9vdFVybCwgZ2xvYmFsVHJhbnNsYXRlLCBGb3JtLCBQYnhBcGksIGNsb2NrV29ya2VyICovXG5cblxuLyoqXG4gKiBPYmplY3QgZm9yIG1hbmFnaW5nIHRpbWUgc2V0dGluZ3MuXG4gKlxuICogQG1vZHVsZSB0aW1lU2V0dGluZ3NcbiAqL1xuY29uc3QgdGltZVNldHRpbmdzID0ge1xuXG4gICAgLyoqXG4gICAgICogalF1ZXJ5IG9iamVjdCBmb3IgdGhlIGZvcm0uXG4gICAgICogQHR5cGUge2pRdWVyeX1cbiAgICAgKi9cbiAgICAkZm9ybU9iajogJCgnI3RpbWUtc2V0dGluZ3MtZm9ybScpLFxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGlvbiBydWxlcyBmb3IgdGhlIGZvcm0gZmllbGRzIGJlZm9yZSBzdWJtaXNzaW9uLlxuICAgICAqXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKi9cbiAgICB2YWxpZGF0ZVJ1bGVzOiB7XG4gICAgICAgIEN1cnJlbnREYXRlVGltZToge1xuICAgICAgICAgICAgZGVwZW5kczogJ1BCWE1hbnVhbFRpbWVTZXR0aW5ncycsXG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnTWFudWFsRGF0ZVRpbWUnLFxuICAgICAgICAgICAgcnVsZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlbXB0eScsXG4gICAgICAgICAgICAgICAgICAgIHByb21wdDogZ2xvYmFsVHJhbnNsYXRlLnRzX1ZhbGlkYXRlRGF0ZVRpbWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSB0aW1lIHNldHRpbmdzLlxuICAgICAqL1xuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgICQoJyNQQlhUaW1lem9uZScpLmRyb3Bkb3duKHtcbiAgICAgICAgICAgIGZ1bGxUZXh0U2VhcmNoOiB0cnVlLFxuICAgICAgICB9KTtcblxuICAgICAgICAkKCcjdGltZS1zZXR0aW5ncy1mb3JtIC5jaGVja2JveCcpLmNoZWNrYm94KHtcbiAgICAgICAgICAgIG9uQ2hhbmdlKCkge1xuICAgICAgICAgICAgICAgIHRpbWVTZXR0aW5ncy50b2dnbGVEaXNhYmxlZEZpZWxkQ2xhc3MoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aW1lU2V0dGluZ3MuaW5pdGlhbGl6ZUZvcm0oKTtcbiAgICAgICAgdGltZVNldHRpbmdzLnRvZ2dsZURpc2FibGVkRmllbGRDbGFzcygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSBkaXNhYmxlZCBmaWVsZCBjbGFzcyBiYXNlZCBvbiB0aGUgc2VsZWN0ZWQgdGltZSBzZXR0aW5nLlxuICAgICAqL1xuICAgIHRvZ2dsZURpc2FibGVkRmllbGRDbGFzcygpIHtcbiAgICAgICAgaWYgKHRpbWVTZXR0aW5ncy4kZm9ybU9iai5mb3JtKCdnZXQgdmFsdWUnLCAnUEJYTWFudWFsVGltZVNldHRpbmdzJykgPT09ICdvbicpIHtcbiAgICAgICAgICAgICQoJyNTZXREYXRlVGltZUJsb2NrJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAkKCcjU2V0TnRwU2VydmVyQmxvY2snKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoJyNTZXROdHBTZXJ2ZXJCbG9jaycpLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgJCgnI1NldERhdGVUaW1lQmxvY2snKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIGNsb2NrV29ya2VyLnJlc3RhcnRXb3JrZXIoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYmVmb3JlIHRoZSBmb3JtIGlzIHNlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZ3MgLSBUaGUgY3VycmVudCBzZXR0aW5ncyBvZiB0aGUgZm9ybVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IC0gVGhlIHVwZGF0ZWQgc2V0dGluZ3Mgb2YgdGhlIGZvcm1cbiAgICAgKi9cbiAgICBjYkJlZm9yZVNlbmRGb3JtKHNldHRpbmdzKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHNldHRpbmdzO1xuICAgICAgICByZXN1bHQuZGF0YSA9IHRpbWVTZXR0aW5ncy4kZm9ybU9iai5mb3JtKCdnZXQgdmFsdWVzJyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhZnRlciB0aGUgZm9ybSBoYXMgYmVlbiBzZW50LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZXNwb25zZSAtIFRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIgYWZ0ZXIgdGhlIGZvcm0gaXMgc2VudFxuICAgICAqL1xuICAgIGNiQWZ0ZXJTZW5kRm9ybShyZXNwb25zZSkge1xuICAgICAgICBpZiAodGltZVNldHRpbmdzLiRmb3JtT2JqLmZvcm0oJ2dldCB2YWx1ZScsICdQQlhNYW51YWxUaW1lU2V0dGluZ3MnKSA9PT0gJ29uJykge1xuICAgICAgICAgICAgY29uc3QgbWFudWFsRGF0ZSA9IHRpbWVTZXR0aW5ncy4kZm9ybU9iai5mb3JtKCdnZXQgdmFsdWUnLCAnTWFudWFsRGF0ZVRpbWUnKTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IERhdGUucGFyc2UoYCR7bWFudWFsRGF0ZX1gKSAvIDEwMDA7XG4gICAgICAgICAgICBjb25zdCB1c2VyVGltZVpvbmUgPSBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkudGltZVpvbmU7XG4gICAgICAgICAgICBQYnhBcGkuVXBkYXRlRGF0ZVRpbWUoe3RpbWVzdGFtcCwgdXNlclRpbWVab25lfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSB0aGUgZm9ybSB3aXRoIGN1c3RvbSBzZXR0aW5nc1xuICAgICAqL1xuICAgIGluaXRpYWxpemVGb3JtKCkge1xuICAgICAgICBGb3JtLiRmb3JtT2JqID0gdGltZVNldHRpbmdzLiRmb3JtT2JqO1xuICAgICAgICBGb3JtLnVybCA9IGAke2dsb2JhbFJvb3RVcmx9dGltZS1zZXR0aW5ncy9zYXZlYDsgLy8gRm9ybSBzdWJtaXNzaW9uIFVSTFxuICAgICAgICBGb3JtLnZhbGlkYXRlUnVsZXMgPSB0aW1lU2V0dGluZ3MudmFsaWRhdGVSdWxlczsgLy8gRm9ybSB2YWxpZGF0aW9uIHJ1bGVzXG4gICAgICAgIEZvcm0uY2JCZWZvcmVTZW5kRm9ybSA9IHRpbWVTZXR0aW5ncy5jYkJlZm9yZVNlbmRGb3JtOyAvLyBDYWxsYmFjayBiZWZvcmUgZm9ybSBpcyBzZW50XG4gICAgICAgIEZvcm0uY2JBZnRlclNlbmRGb3JtID0gdGltZVNldHRpbmdzLmNiQWZ0ZXJTZW5kRm9ybTsgLy8gQ2FsbGJhY2sgYWZ0ZXIgZm9ybSBpcyBzZW50XG4gICAgICAgIEZvcm0uaW5pdGlhbGl6ZSgpO1xuICAgIH0sXG59O1xuXG4vLyBXaGVuIHRoZSBkb2N1bWVudCBpcyByZWFkeSwgaW5pdGlhbGl6ZSB0aGUgdGltZSBzZXR0aW5ncyBmb3JtXG4kKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XG4gICAgdGltZVNldHRpbmdzLmluaXRpYWxpemUoKTtcbn0pO1xuIl19