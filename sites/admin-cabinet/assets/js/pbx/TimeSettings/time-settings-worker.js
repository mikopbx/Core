"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global moment */

/**
 * Object for managing the clock worker.
 *
 * @module clockWorker
 */
var clockWorker = {
  /**
   * The id of the timer function for the worker.
   * @type {number}
   */
  timeOutHandle: 0,

  /**
   * Options for the clock worker.
   * @type {object|null}
   */
  options: null,

  /**
   * Initializes the clock worker.
   */
  initialize: function initialize() {
    clockWorker.restartWorker();
  },

  /**
   * Restarts the clock worker.
   */
  restartWorker: function restartWorker() {
    window.clearTimeout(clockWorker.timeoutHandle);
    clockWorker.worker();
  },

  /**
   * Performs the clock worker operations.
   */
  worker: function worker() {
    PbxApi.GetDateTime(clockWorker.cbAfterReceiveDateTimeFromServer);
  },

  /**
   * Callback function after receiving the date and time from the server.
   * @param {object|boolean} response - The response from the server.
   */
  cbAfterReceiveDateTimeFromServer: function cbAfterReceiveDateTimeFromServer(response) {
    var options = {
      timeZone: timeSettings.$formObj.form('get value', 'PBXTimezone'),
      timeZoneName: 'short'
    };

    if (timeSettings.$formObj.form('get value', 'PBXManualTimeSettings') !== 'on') {
      clockWorker.timeoutHandle = window.setTimeout(clockWorker.worker, 1000);
    } else {
      options.timeZoneName = undefined;
    }

    if (response !== false) {
      var dateTime = new Date(response.timestamp * 1000);
      moment.locale(globalWebAdminLanguage);
      var m = moment(dateTime); //timeSettings.$formObj.form('set value', 'ManualDateTime', dateTime.toLocaleString(globalWebAdminLanguage, options));

      timeSettings.$formObj.form('set value', 'ManualDateTime', m.tz(options.timeZone).format());
    }
  }
}; // When the document is ready, initialize the time settings worker

$(document).ready(function () {
  clockWorker.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UaW1lU2V0dGluZ3MvdGltZS1zZXR0aW5ncy13b3JrZXIuanMiXSwibmFtZXMiOlsiY2xvY2tXb3JrZXIiLCJ0aW1lT3V0SGFuZGxlIiwib3B0aW9ucyIsImluaXRpYWxpemUiLCJyZXN0YXJ0V29ya2VyIiwid2luZG93IiwiY2xlYXJUaW1lb3V0IiwidGltZW91dEhhbmRsZSIsIndvcmtlciIsIlBieEFwaSIsIkdldERhdGVUaW1lIiwiY2JBZnRlclJlY2VpdmVEYXRlVGltZUZyb21TZXJ2ZXIiLCJyZXNwb25zZSIsInRpbWVab25lIiwidGltZVNldHRpbmdzIiwiJGZvcm1PYmoiLCJmb3JtIiwidGltZVpvbmVOYW1lIiwic2V0VGltZW91dCIsInVuZGVmaW5lZCIsImRhdGVUaW1lIiwiRGF0ZSIsInRpbWVzdGFtcCIsIm1vbWVudCIsImxvY2FsZSIsImdsb2JhbFdlYkFkbWluTGFuZ3VhZ2UiLCJtIiwidHoiLCJmb3JtYXQiLCIkIiwiZG9jdW1lbnQiLCJyZWFkeSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxXQUFXLEdBQUc7QUFDaEI7QUFDSjtBQUNBO0FBQ0E7QUFDSUMsRUFBQUEsYUFBYSxFQUFFLENBTEM7O0FBTWhCO0FBQ0o7QUFDQTtBQUNBO0FBQ0lDLEVBQUFBLE9BQU8sRUFBRSxJQVZPOztBQVloQjtBQUNKO0FBQ0E7QUFDSUMsRUFBQUEsVUFmZ0Isd0JBZUg7QUFDVEgsSUFBQUEsV0FBVyxDQUFDSSxhQUFaO0FBQ0gsR0FqQmU7O0FBbUJoQjtBQUNKO0FBQ0E7QUFDSUEsRUFBQUEsYUF0QmdCLDJCQXNCQTtBQUNaQyxJQUFBQSxNQUFNLENBQUNDLFlBQVAsQ0FBb0JOLFdBQVcsQ0FBQ08sYUFBaEM7QUFDQVAsSUFBQUEsV0FBVyxDQUFDUSxNQUFaO0FBQ0gsR0F6QmU7O0FBMkJoQjtBQUNKO0FBQ0E7QUFDSUEsRUFBQUEsTUE5QmdCLG9CQThCUDtBQUNMQyxJQUFBQSxNQUFNLENBQUNDLFdBQVAsQ0FBbUJWLFdBQVcsQ0FBQ1csZ0NBQS9CO0FBQ0gsR0FoQ2U7O0FBa0NoQjtBQUNKO0FBQ0E7QUFDQTtBQUNJQSxFQUFBQSxnQ0F0Q2dCLDRDQXNDaUJDLFFBdENqQixFQXNDMkI7QUFDdkMsUUFBTVYsT0FBTyxHQUFHO0FBQUNXLE1BQUFBLFFBQVEsRUFBRUMsWUFBWSxDQUFDQyxRQUFiLENBQXNCQyxJQUF0QixDQUEyQixXQUEzQixFQUF3QyxhQUF4QyxDQUFYO0FBQW1FQyxNQUFBQSxZQUFZLEVBQUU7QUFBakYsS0FBaEI7O0FBQ0EsUUFBSUgsWUFBWSxDQUFDQyxRQUFiLENBQXNCQyxJQUF0QixDQUEyQixXQUEzQixFQUF3Qyx1QkFBeEMsTUFBcUUsSUFBekUsRUFBK0U7QUFDM0VoQixNQUFBQSxXQUFXLENBQUNPLGFBQVosR0FBNEJGLE1BQU0sQ0FBQ2EsVUFBUCxDQUN4QmxCLFdBQVcsQ0FBQ1EsTUFEWSxFQUV4QixJQUZ3QixDQUE1QjtBQUlILEtBTEQsTUFLTztBQUNITixNQUFBQSxPQUFPLENBQUNlLFlBQVIsR0FBdUJFLFNBQXZCO0FBQ0g7O0FBQ0QsUUFBSVAsUUFBUSxLQUFLLEtBQWpCLEVBQXdCO0FBRXBCLFVBQU1RLFFBQVEsR0FBRyxJQUFJQyxJQUFKLENBQVNULFFBQVEsQ0FBQ1UsU0FBVCxHQUFxQixJQUE5QixDQUFqQjtBQUNBQyxNQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBY0Msc0JBQWQ7QUFDQSxVQUFNQyxDQUFDLEdBQUdILE1BQU0sQ0FBQ0gsUUFBRCxDQUFoQixDQUpvQixDQUtwQjs7QUFDQU4sTUFBQUEsWUFBWSxDQUFDQyxRQUFiLENBQXNCQyxJQUF0QixDQUEyQixXQUEzQixFQUF3QyxnQkFBeEMsRUFBMERVLENBQUMsQ0FBQ0MsRUFBRixDQUFLekIsT0FBTyxDQUFDVyxRQUFiLEVBQXVCZSxNQUF2QixFQUExRDtBQUNIO0FBQ0o7QUF4RGUsQ0FBcEIsQyxDQTJEQTs7QUFDQUMsQ0FBQyxDQUFDQyxRQUFELENBQUQsQ0FBWUMsS0FBWixDQUFrQixZQUFNO0FBQ3BCL0IsRUFBQUEsV0FBVyxDQUFDRyxVQUFaO0FBQ0gsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaWtvUEJYIC0gZnJlZSBwaG9uZSBzeXN0ZW0gZm9yIHNtYWxsIGJ1c2luZXNzXG4gKiBDb3B5cmlnaHQgwqkgMjAxNy0yMDIzIEFsZXhleSBQb3J0bm92IGFuZCBOaWtvbGF5IEJla2V0b3ZcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uXG4gKiBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG5cbi8qIGdsb2JhbCBtb21lbnQgKi9cblxuXG4vKipcbiAqIE9iamVjdCBmb3IgbWFuYWdpbmcgdGhlIGNsb2NrIHdvcmtlci5cbiAqXG4gKiBAbW9kdWxlIGNsb2NrV29ya2VyXG4gKi9cbmNvbnN0IGNsb2NrV29ya2VyID0ge1xuICAgIC8qKlxuICAgICAqIFRoZSBpZCBvZiB0aGUgdGltZXIgZnVuY3Rpb24gZm9yIHRoZSB3b3JrZXIuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aW1lT3V0SGFuZGxlOiAwLFxuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgZm9yIHRoZSBjbG9jayB3b3JrZXIuXG4gICAgICogQHR5cGUge29iamVjdHxudWxsfVxuICAgICAqL1xuICAgIG9wdGlvbnM6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgY2xvY2sgd29ya2VyLlxuICAgICAqL1xuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIGNsb2NrV29ya2VyLnJlc3RhcnRXb3JrZXIoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVzdGFydHMgdGhlIGNsb2NrIHdvcmtlci5cbiAgICAgKi9cbiAgICByZXN0YXJ0V29ya2VyKCkge1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGNsb2NrV29ya2VyLnRpbWVvdXRIYW5kbGUpO1xuICAgICAgICBjbG9ja1dvcmtlci53b3JrZXIoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgdGhlIGNsb2NrIHdvcmtlciBvcGVyYXRpb25zLlxuICAgICAqL1xuICAgIHdvcmtlcigpIHtcbiAgICAgICAgUGJ4QXBpLkdldERhdGVUaW1lKGNsb2NrV29ya2VyLmNiQWZ0ZXJSZWNlaXZlRGF0ZVRpbWVGcm9tU2VydmVyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZnVuY3Rpb24gYWZ0ZXIgcmVjZWl2aW5nIHRoZSBkYXRlIGFuZCB0aW1lIGZyb20gdGhlIHNlcnZlci5cbiAgICAgKiBAcGFyYW0ge29iamVjdHxib29sZWFufSByZXNwb25zZSAtIFRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICovXG4gICAgY2JBZnRlclJlY2VpdmVEYXRlVGltZUZyb21TZXJ2ZXIocmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHt0aW1lWm9uZTogdGltZVNldHRpbmdzLiRmb3JtT2JqLmZvcm0oJ2dldCB2YWx1ZScsICdQQlhUaW1lem9uZScpLCB0aW1lWm9uZU5hbWU6ICdzaG9ydCd9O1xuICAgICAgICBpZiAodGltZVNldHRpbmdzLiRmb3JtT2JqLmZvcm0oJ2dldCB2YWx1ZScsICdQQlhNYW51YWxUaW1lU2V0dGluZ3MnKSAhPT0gJ29uJykge1xuICAgICAgICAgICAgY2xvY2tXb3JrZXIudGltZW91dEhhbmRsZSA9IHdpbmRvdy5zZXRUaW1lb3V0KFxuICAgICAgICAgICAgICAgIGNsb2NrV29ya2VyLndvcmtlcixcbiAgICAgICAgICAgICAgICAxMDAwLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMudGltZVpvbmVOYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZSAhPT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgY29uc3QgZGF0ZVRpbWUgPSBuZXcgRGF0ZShyZXNwb25zZS50aW1lc3RhbXAgKiAxMDAwKTtcbiAgICAgICAgICAgIG1vbWVudC5sb2NhbGUoZ2xvYmFsV2ViQWRtaW5MYW5ndWFnZSk7XG4gICAgICAgICAgICBjb25zdCBtID0gbW9tZW50KGRhdGVUaW1lLCk7XG4gICAgICAgICAgICAvL3RpbWVTZXR0aW5ncy4kZm9ybU9iai5mb3JtKCdzZXQgdmFsdWUnLCAnTWFudWFsRGF0ZVRpbWUnLCBkYXRlVGltZS50b0xvY2FsZVN0cmluZyhnbG9iYWxXZWJBZG1pbkxhbmd1YWdlLCBvcHRpb25zKSk7XG4gICAgICAgICAgICB0aW1lU2V0dGluZ3MuJGZvcm1PYmouZm9ybSgnc2V0IHZhbHVlJywgJ01hbnVhbERhdGVUaW1lJywgbS50eihvcHRpb25zLnRpbWVab25lKS5mb3JtYXQoKSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vLyBXaGVuIHRoZSBkb2N1bWVudCBpcyByZWFkeSwgaW5pdGlhbGl6ZSB0aGUgdGltZSBzZXR0aW5ncyB3b3JrZXJcbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcbiAgICBjbG9ja1dvcmtlci5pbml0aWFsaXplKCk7XG59KTtcbiJdfQ==