"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, globalTranslate, Form, $ */
// custom form validation rule
$.fn.form.settings.rules.username = function (noregister, username) {
  return !(username.length === 0 && noregister !== 'on');
};

var provider = {
  $formObj: $('#save-provider-form'),
  $dirrtyField: $('#dirrty'),
  providerType: $('#providerType').val(),
  $checkBoxes: $('#save-provider-form .checkbox'),
  $accordions: $('#save-provider-form .ui.accordion'),
  $dropDowns: $('#save-provider-form .ui.dropdown'),
  $deleteRowButton: $('#additional-hosts-table .delete-row-button'),
  $qualifyToggle: $('#qualify'),
  $qualifyFreqToggle: $('#qualify-freq'),
  $additionalHostInput: $('#additional-host input'),
  hostInputValidation: /^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(\d|[1-2]\d|3[0-2]))?|[a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+)$/gm,
  hostRow: '#save-provider-form .host-row',
  validateRules: {
    description: {
      identifier: 'description',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.pr_ValidationProviderNameIsEmpty
      }]
    },
    host: {
      identifier: 'host',
      rules: [{
        type: 'checkHostProvider',
        prompt: globalTranslate.pr_ValidationProviderHostIsEmpty
      }]
    },
    username: {
      identifier: 'username',
      optional: true,
      rules: [{
        type: 'minLength[2]',
        prompt: globalTranslate.pr_ValidationProviderLoginNotSingleSimbol
      }]
    },
    port: {
      identifier: 'port',
      rules: [{
        type: 'integer[1..65535]',
        prompt: globalTranslate.pr_ValidationProviderPortRange
      }]
    }
  },
  initialize: function initialize() {
    provider.$checkBoxes.checkbox();
    provider.$accordions.accordion();
    provider.$dropDowns.dropdown();
    provider.$qualifyToggle.checkbox({
      onChange: function onChange() {
        if (provider.$qualifyToggle.checkbox('is checked')) {
          provider.$qualifyFreqToggle.removeClass('disabled');
        } else {
          provider.$qualifyFreqToggle.addClass('disabled');
        }
      }
    }); // Add new string to additional-hosts-table table

    provider.$additionalHostInput.keypress(function (e) {
      if (e.which === 13) {
        provider.cbOnCompleteHostAddress();
      }
    }); // Delete host from additional-hosts-table

    provider.$deleteRowButton.on('click', function (e) {
      $(e.target).closest('tr').remove();
      provider.updateHostsTableView();
      provider.$dirrtyField.val(Math.random());
      provider.$dirrtyField.trigger('change');
      e.preventDefault();
      return false;
    });
    provider.initializeForm();
    provider.updateVisibilityElements();
    $('#registration_type').on('change', provider.updateVisibilityElements);
    $('#disablefromuser input').on('change', provider.updateVisibilityElements);
  },
  updateVisibilityElements: function updateVisibilityElements() {
    if (provider.providerType !== 'SIP') {
      return;
    }

    var elHost = $('#elHost');
    var elUsername = $('#elUsername');
    var elSecret = $('#elSecret');
    var elAdditionalHost = $('#elAdditionalHosts');
    var regType = $('#registration_type').val();
    var elUniqId = $('#uniqid');
    var valUserName = $('#username');
    var valSecret = $('#secret');

    if (valUserName.val() === elUniqId.val()) {
      valUserName.val('');
    }

    valUserName.removeAttr('readonly');

    if (regType === 'outbound') {
      valSecret.attr('type', 'password');
      elHost.show();
      elUsername.show();
      elSecret.show();
      elAdditionalHost.show();
    } else if (regType === 'inbound') {
      valUserName.val(elUniqId.val());
      valUserName.attr('readonly', '');

      if (valSecret.val().trim() === '') {
        valSecret.val('id=' + $('#id').val() + '-' + elUniqId.val());
      }

      valSecret.attr('type', 'text');
      elHost.hide();
      elUsername.show();
      elSecret.show();
      elAdditionalHost.hide();
    } else if (regType === 'none') {
      elHost.show();
      elUsername.hide();
      elSecret.hide();
      elAdditionalHost.show();
    }

    var el = $('#disablefromuser');
    var fromUser = $('#divFromUser');

    if (el.checkbox('is checked')) {
      fromUser.hide();
      fromUser.removeClass('visible');
    } else {
      fromUser.show();
      fromUser.addClass('visible');
    }
  },

  /**
   * Adds record to hosts table
   */
  cbOnCompleteHostAddress: function cbOnCompleteHostAddress() {
    var value = provider.$formObj.form('get value', 'additional-host');

    if (value) {
      var validation = value.match(provider.hostInputValidation);

      if (validation === null || validation.length === 0) {
        provider.$additionalHostInput.transition('shake');
        return;
      }

      if ($(".host-row[data-value=\"".concat(value, "\"]")).length === 0) {
        var $tr = $('.host-row-tpl').last();
        var $clone = $tr.clone(true);
        $clone.removeClass('host-row-tpl').addClass('host-row').show();
        $clone.attr('data-value', value);
        $clone.find('.address').html(value);

        if ($(provider.hostRow).last().length === 0) {
          $tr.after($clone);
        } else {
          $(provider.hostRow).last().after($clone);
        }

        provider.updateHostsTableView();
        provider.$dirrtyField.val(Math.random());
        provider.$dirrtyField.trigger('change');
      }

      provider.$additionalHostInput.val('');
    }
  },

  /**
   * Shows dummy if we have zero rows
   */
  updateHostsTableView: function updateHostsTableView() {
    var dummy = "<tr class=\"dummy\"><td colspan=\"4\" class=\"center aligned\">".concat(globalTranslate.pr_NoAnyAdditionalHosts, "</td></tr>");

    if ($(provider.hostRow).length === 0) {
      $('#additional-hosts-table tbody').append(dummy);
    } else {
      $('#additional-hosts-table tbody .dummy').remove();
    }
  },
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = provider.$formObj.form('get values');
    var arrAdditionalHosts = [];
    $(provider.hostRow).each(function (index, obj) {
      if ($(obj).attr('data-value')) {
        arrAdditionalHosts.push({
          address: $(obj).attr('data-value')
        });
      }
    });
    result.data.additionalHosts = JSON.stringify(arrAdditionalHosts);
    return result;
  },
  cbAfterSendForm: function cbAfterSendForm() {},
  initializeForm: function initializeForm() {
    Form.$formObj = provider.$formObj;

    Form.$formObj.form.settings.rules.checkHostProvider = function (value) {
      var enable;

      if ($('#registration_type').val() === 'inbound') {
        enable = true;
      } else {
        enable = value.trim() !== '';
      }

      return enable;
    };

    switch (provider.providerType) {
      case 'SIP':
        Form.url = "".concat(globalRootUrl, "providers/save/sip");
        break;

      case 'IAX':
        Form.url = "".concat(globalRootUrl, "providers/save/iax");
        break;

      default:
        return;
    }

    Form.validateRules = provider.validateRules;
    Form.cbBeforeSendForm = provider.cbBeforeSendForm;
    Form.cbAfterSendForm = provider.cbAfterSendForm;
    Form.initialize();
  }
};
$(document).ready(function () {
  provider.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Qcm92aWRlcnMvcHJvdmlkZXItbW9kaWZ5LmpzIl0sIm5hbWVzIjpbIiQiLCJmbiIsImZvcm0iLCJzZXR0aW5ncyIsInJ1bGVzIiwidXNlcm5hbWUiLCJub3JlZ2lzdGVyIiwibGVuZ3RoIiwicHJvdmlkZXIiLCIkZm9ybU9iaiIsIiRkaXJydHlGaWVsZCIsInByb3ZpZGVyVHlwZSIsInZhbCIsIiRjaGVja0JveGVzIiwiJGFjY29yZGlvbnMiLCIkZHJvcERvd25zIiwiJGRlbGV0ZVJvd0J1dHRvbiIsIiRxdWFsaWZ5VG9nZ2xlIiwiJHF1YWxpZnlGcmVxVG9nZ2xlIiwiJGFkZGl0aW9uYWxIb3N0SW5wdXQiLCJob3N0SW5wdXRWYWxpZGF0aW9uIiwiaG9zdFJvdyIsInZhbGlkYXRlUnVsZXMiLCJkZXNjcmlwdGlvbiIsImlkZW50aWZpZXIiLCJ0eXBlIiwicHJvbXB0IiwiZ2xvYmFsVHJhbnNsYXRlIiwicHJfVmFsaWRhdGlvblByb3ZpZGVyTmFtZUlzRW1wdHkiLCJob3N0IiwicHJfVmFsaWRhdGlvblByb3ZpZGVySG9zdElzRW1wdHkiLCJvcHRpb25hbCIsInByX1ZhbGlkYXRpb25Qcm92aWRlckxvZ2luTm90U2luZ2xlU2ltYm9sIiwicG9ydCIsInByX1ZhbGlkYXRpb25Qcm92aWRlclBvcnRSYW5nZSIsImluaXRpYWxpemUiLCJjaGVja2JveCIsImFjY29yZGlvbiIsImRyb3Bkb3duIiwib25DaGFuZ2UiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwia2V5cHJlc3MiLCJlIiwid2hpY2giLCJjYk9uQ29tcGxldGVIb3N0QWRkcmVzcyIsIm9uIiwidGFyZ2V0IiwiY2xvc2VzdCIsInJlbW92ZSIsInVwZGF0ZUhvc3RzVGFibGVWaWV3IiwiTWF0aCIsInJhbmRvbSIsInRyaWdnZXIiLCJwcmV2ZW50RGVmYXVsdCIsImluaXRpYWxpemVGb3JtIiwidXBkYXRlVmlzaWJpbGl0eUVsZW1lbnRzIiwiZWxIb3N0IiwiZWxVc2VybmFtZSIsImVsU2VjcmV0IiwiZWxBZGRpdGlvbmFsSG9zdCIsInJlZ1R5cGUiLCJlbFVuaXFJZCIsInZhbFVzZXJOYW1lIiwidmFsU2VjcmV0IiwicmVtb3ZlQXR0ciIsImF0dHIiLCJzaG93IiwidHJpbSIsImhpZGUiLCJlbCIsImZyb21Vc2VyIiwidmFsdWUiLCJ2YWxpZGF0aW9uIiwibWF0Y2giLCJ0cmFuc2l0aW9uIiwiJHRyIiwibGFzdCIsIiRjbG9uZSIsImNsb25lIiwiZmluZCIsImh0bWwiLCJhZnRlciIsImR1bW15IiwicHJfTm9BbnlBZGRpdGlvbmFsSG9zdHMiLCJhcHBlbmQiLCJjYkJlZm9yZVNlbmRGb3JtIiwicmVzdWx0IiwiZGF0YSIsImFyckFkZGl0aW9uYWxIb3N0cyIsImVhY2giLCJpbmRleCIsIm9iaiIsInB1c2giLCJhZGRyZXNzIiwiYWRkaXRpb25hbEhvc3RzIiwiSlNPTiIsInN0cmluZ2lmeSIsImNiQWZ0ZXJTZW5kRm9ybSIsIkZvcm0iLCJjaGVja0hvc3RQcm92aWRlciIsImVuYWJsZSIsInVybCIsImdsb2JhbFJvb3RVcmwiLCJkb2N1bWVudCIsInJlYWR5Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFFQTtBQUNBQSxDQUFDLENBQUNDLEVBQUYsQ0FBS0MsSUFBTCxDQUFVQyxRQUFWLENBQW1CQyxLQUFuQixDQUF5QkMsUUFBekIsR0FBb0MsVUFBVUMsVUFBVixFQUFzQkQsUUFBdEIsRUFBZ0M7QUFDbkUsU0FBTyxFQUFFQSxRQUFRLENBQUNFLE1BQVQsS0FBb0IsQ0FBcEIsSUFBeUJELFVBQVUsS0FBSyxJQUExQyxDQUFQO0FBQ0EsQ0FGRDs7QUFJQSxJQUFNRSxRQUFRLEdBQUc7QUFDaEJDLEVBQUFBLFFBQVEsRUFBRVQsQ0FBQyxDQUFDLHFCQUFELENBREs7QUFFaEJVLEVBQUFBLFlBQVksRUFBRVYsQ0FBQyxDQUFDLFNB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RyxFQUFBQSxRQUFRLENBQUMyQixVQUFUO0FBQ0EsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaWtvUEJYIC0gZnJlZSBwaG9uZSBzeXN0ZW0gZm9yIHNtYWxsIGJ1c2luZXNzXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTctMjAyMCBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgZ2xvYmFsUm9vdFVybCwgZ2xvYmFsVHJhbnNsYXRlLCBGb3JtLCAkICovXG5cbi8vIGN1c3RvbSBmb3JtIHZhbGlkYXRpb24gcnVsZVxuJC5mbi5mb3JtLnNldHRpbmdzLnJ1bGVzLnVzZXJuYW1lID0gZnVuY3Rpb24gKG5vcmVnaXN0ZXIsIHVzZXJuYW1lKSB7XG5cdHJldHVybiAhKHVzZXJuYW1lLmxlbmd0aCA9PT0gMCAmJiBub3JlZ2lzdGVyICE9PSAnb24nKTtcbn07XG5cbmNvbnN0IHByb3ZpZGVyID0ge1xuXHQkZm9ybU9iajogJCgnI3NhdmUtcHJvdmlkZXItZm9ybScpLFxuXHQkZGlycnR5RmllbGQ6ICQoJyNkaXJydHknKSxcblx0cHJvdmlkZXJUeXBlOiAkKCcjcHJvdmlkZXJUeXBlJykudmFsKCksXG5cdCRjaGVja0JveGVzOiAkKCcjc2F2ZS1wcm92aWRlci1mb3JtIC5jaGVja2JveCcpLFxuXHQkYWNjb3JkaW9uczogJCgnI3NhdmUtcHJvdmlkZXItZm9ybSAudWkuYWNjb3JkaW9uJyksXG5cdCRkcm9wRG93bnM6ICQoJyNzYXZlLXByb3ZpZGVyLWZvcm0gLnVpLmRyb3Bkb3duJyksXG5cdCRkZWxldGVSb3dCdXR0b246ICQoJyNhZGRpdGlvbmFsLWhvc3RzLXRhYmxlIC5kZWxldGUtcm93LWJ1dHRvbicpLFxuXHQkcXVhbGlmeVRvZ2dsZTogJCgnI3F1YWxpZnknKSxcblx0JHF1YWxpZnlGcmVxVG9nZ2xlOiAkKCcjcXVhbGlmeS1mcmVxJyksXG5cdCRhZGRpdGlvbmFsSG9zdElucHV0OiAkKCcjYWRkaXRpb25hbC1ob3N0IGlucHV0JyksXG5cdGhvc3RJbnB1dFZhbGlkYXRpb246IC9eKCgoWzAtOV18WzEtOV1bMC05XXwxWzAtOV17Mn18MlswLTRdWzAtOV18MjVbMC01XSlcXC4pezN9KFswLTldfFsxLTldWzAtOV18MVswLTldezJ9fDJbMC00XVswLTldfDI1WzAtNV0pKFxcLyhcXGR8WzEtMl1cXGR8M1swLTJdKSk/fFthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKD86XFwuW2EtekEtWl17Mix9KSspJC9nbSxcblx0aG9zdFJvdzogJyNzYXZlLXByb3ZpZGVyLWZvcm0gLmhvc3Qtcm93Jyxcblx0dmFsaWRhdGVSdWxlczoge1xuXHRcdGRlc2NyaXB0aW9uOiB7XG5cdFx0XHRpZGVudGlmaWVyOiAnZGVzY3JpcHRpb24nLFxuXHRcdFx0cnVsZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdlbXB0eScsXG5cdFx0XHRcdFx0cHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUucHJfVmFsaWRhdGlvblByb3ZpZGVyTmFtZUlzRW1wdHksXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0aG9zdDoge1xuXHRcdFx0aWRlbnRpZmllcjogJ2hvc3QnLFxuXHRcdFx0cnVsZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdjaGVja0hvc3RQcm92aWRlcicsXG5cdFx0XHRcdFx0cHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUucHJfVmFsaWRhdGlvblByb3ZpZGVySG9zdElzRW1wdHksXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0dXNlcm5hbWU6IHtcblx0XHRcdGlkZW50aWZpZXI6ICd1c2VybmFtZScsXG5cdFx0XHRvcHRpb25hbCAgIDogdHJ1ZSxcblx0XHRcdHJ1bGVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAnbWluTGVuZ3RoWzJdJyxcblx0XHRcdFx0XHRwcm9tcHQ6IGdsb2JhbFRyYW5zbGF0ZS5wcl9WYWxpZGF0aW9uUHJvdmlkZXJMb2dpbk5vdFNpbmdsZVNpbWJvbCxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0XHRwb3J0OiB7XG5cdFx0XHRpZGVudGlmaWVyOiAncG9ydCcsXG5cdFx0XHRydWxlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ2ludGVnZXJbMS4uNjU1MzVdJyxcblx0XHRcdFx0XHRwcm9tcHQ6IGdsb2JhbFRyYW5zbGF0ZS5wcl9WYWxpZGF0aW9uUHJvdmlkZXJQb3J0UmFuZ2UsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdH0sXG5cdGluaXRpYWxpemUoKSB7XG5cdFx0cHJvdmlkZXIuJGNoZWNrQm94ZXMuY2hlY2tib3goKTtcblx0XHRwcm92aWRlci4kYWNjb3JkaW9ucy5hY2NvcmRpb24oKTtcblx0XHRwcm92aWRlci4kZHJvcERvd25zLmRyb3Bkb3duKCk7XG5cdFx0cHJvdmlkZXIuJHF1YWxpZnlUb2dnbGUuY2hlY2tib3goe1xuXHRcdFx0b25DaGFuZ2UoKSB7XG5cdFx0XHRcdGlmIChwcm92aWRlci4kcXVhbGlmeVRvZ2dsZS5jaGVja2JveCgnaXMgY2hlY2tlZCcpKSB7XG5cdFx0XHRcdFx0cHJvdmlkZXIuJHF1YWxpZnlGcmVxVG9nZ2xlLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHByb3ZpZGVyLiRxdWFsaWZ5RnJlcVRvZ2dsZS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHR9KTtcblx0XHQvLyBBZGQgbmV3IHN0cmluZyB0byBhZGRpdGlvbmFsLWhvc3RzLXRhYmxlIHRhYmxlXG5cdFx0cHJvdmlkZXIuJGFkZGl0aW9uYWxIb3N0SW5wdXQua2V5cHJlc3MoKGUpPT57XG5cdFx0XHRpZiAoZS53aGljaCA9PT0gMTMpIHtcblx0XHRcdFx0cHJvdmlkZXIuY2JPbkNvbXBsZXRlSG9zdEFkZHJlc3MoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHQvLyBEZWxldGUgaG9zdCBmcm9tIGFkZGl0aW9uYWwtaG9zdHMtdGFibGVcblx0XHRwcm92aWRlci4kZGVsZXRlUm93QnV0dG9uLm9uKCdjbGljaycsIChlKSA9PiB7XG5cdFx0XHQkKGUudGFyZ2V0KS5jbG9zZXN0KCd0cicpLnJlbW92ZSgpO1xuXHRcdFx0cHJvdmlkZXIudXBkYXRlSG9zdHNUYWJsZVZpZXcoKTtcblx0XHRcdHByb3ZpZGVyLiRkaXJydHlGaWVsZC52YWwoTWF0aC5yYW5kb20oKSk7XG5cdFx0XHRwcm92aWRlci4kZGlycnR5RmllbGQudHJpZ2dlcignY2hhbmdlJyk7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSk7XG5cdFx0cHJvdmlkZXIuaW5pdGlhbGl6ZUZvcm0oKTtcblxuXHRcdHByb3ZpZGVyLnVwZGF0ZVZpc2liaWxpdHlFbGVtZW50cygpO1xuXHRcdCQoJyNyZWdpc3RyYXRpb25fdHlwZScpLm9uKCdjaGFuZ2UnLCBwcm92aWRlci51cGRhdGVWaXNpYmlsaXR5RWxlbWVudHMpO1xuXHRcdCQoJyNkaXNhYmxlZnJvbXVzZXIgaW5wdXQnKS5vbignY2hhbmdlJywgcHJvdmlkZXIudXBkYXRlVmlzaWJpbGl0eUVsZW1lbnRzKTtcblx0fSxcblx0dXBkYXRlVmlzaWJpbGl0eUVsZW1lbnRzKCl7XG5cdFx0aWYocHJvdmlkZXIucHJvdmlkZXJUeXBlICE9PSAnU0lQJyl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGxldCBlbEhvc3QgXHQgICAgXHQ9ICQoJyNlbEhvc3QnKTtcblx0XHRsZXQgZWxVc2VybmFtZSAgXHQ9ICQoJyNlbFVzZXJuYW1lJyk7XG5cdFx0bGV0IGVsU2VjcmV0ICAgIFx0PSAkKCcjZWxTZWNyZXQnKTtcblx0XHRsZXQgZWxBZGRpdGlvbmFsSG9zdD0gJCgnI2VsQWRkaXRpb25hbEhvc3RzJyk7XG5cdFx0bGV0IHJlZ1R5cGUgXHRcdD0gJCgnI3JlZ2lzdHJhdGlvbl90eXBlJykudmFsKCk7XG5cdFx0bGV0IGVsVW5pcUlkXHRcdD0gJCgnI3VuaXFpZCcpO1xuXG5cdFx0bGV0IHZhbFVzZXJOYW1lICBcdD0gJCgnI3VzZXJuYW1lJyk7XG5cdFx0bGV0IHZhbFNlY3JldCAgIFx0PSAkKCcjc2VjcmV0Jyk7XG5cblx0XHRpZih2YWxVc2VyTmFtZS52YWwoKSA9PT0gZWxVbmlxSWQudmFsKCkpe1xuXHRcdFx0dmFsVXNlck5hbWUudmFsKCcnKTtcblx0XHR9XG5cdFx0dmFsVXNlck5hbWUucmVtb3ZlQXR0cigncmVhZG9ubHknKTtcblxuXHRcdGlmKHJlZ1R5cGUgPT09ICdvdXRib3VuZCcpe1xuXHRcdFx0dmFsU2VjcmV0LmF0dHIoJ3R5cGUnLCAncGFzc3dvcmQnKVxuXHRcdFx0ZWxIb3N0LnNob3coKTtcblx0XHRcdGVsVXNlcm5hbWUuc2hvdygpO1xuXHRcdFx0ZWxTZWNyZXQuc2hvdygpO1xuXHRcdFx0ZWxBZGRpdGlvbmFsSG9zdC5zaG93KCk7XG5cdFx0fWVsc2UgaWYocmVnVHlwZSA9PT0gJ2luYm91bmQnKXtcblx0XHRcdHZhbFVzZXJOYW1lLnZhbChlbFVuaXFJZC52YWwoKSk7XG5cdFx0XHR2YWxVc2VyTmFtZS5hdHRyKCdyZWFkb25seScsICcnKTtcblx0XHRcdGlmKHZhbFNlY3JldC52YWwoKS50cmltKCkgPT09ICcnKXtcblx0XHRcdFx0dmFsU2VjcmV0LnZhbCgnaWQ9JyskKCcjaWQnKS52YWwoKSsnLScrZWxVbmlxSWQudmFsKCkpXG5cdFx0XHR9XG5cdFx0XHR2YWxTZWNyZXQuYXR0cigndHlwZScsICd0ZXh0JylcblxuXHRcdFx0ZWxIb3N0LmhpZGUoKTtcblx0XHRcdGVsVXNlcm5hbWUuc2hvdygpO1xuXHRcdFx0ZWxTZWNyZXQuc2hvdygpO1xuXHRcdFx0ZWxBZGRpdGlvbmFsSG9zdC5oaWRlKCk7XG5cdFx0fWVsc2UgaWYocmVnVHlwZSA9PT0gJ25vbmUnKXtcblx0XHRcdGVsSG9zdC5zaG93KCk7XG5cdFx0XHRlbFVzZXJuYW1lLmhpZGUoKTtcblx0XHRcdGVsU2VjcmV0LmhpZGUoKTtcblx0XHRcdGVsQWRkaXRpb25hbEhvc3Quc2hvdygpO1xuXHRcdH1cblxuXHRcdGxldCBlbCA9ICQoJyNkaXNhYmxlZnJvbXVzZXInKTtcblx0XHRsZXQgZnJvbVVzZXIgPSAkKCcjZGl2RnJvbVVzZXInKTtcblx0XHRpZihlbC5jaGVja2JveCgnaXMgY2hlY2tlZCcpKXtcblx0XHRcdGZyb21Vc2VyLmhpZGUoKTtcblx0XHRcdGZyb21Vc2VyLnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XG5cdFx0fWVsc2V7XG5cdFx0XHRmcm9tVXNlci5zaG93KCk7XG5cdFx0XHRmcm9tVXNlci5hZGRDbGFzcygndmlzaWJsZScpO1xuXG5cdFx0fVxuXHR9LFxuXHQvKipcblx0ICogQWRkcyByZWNvcmQgdG8gaG9zdHMgdGFibGVcblx0ICovXG5cdGNiT25Db21wbGV0ZUhvc3RBZGRyZXNzKCl7XG5cdFx0Y29uc3QgdmFsdWUgPSBwcm92aWRlci4kZm9ybU9iai5mb3JtKCdnZXQgdmFsdWUnLCAnYWRkaXRpb25hbC1ob3N0Jyk7XG5cdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRjb25zdCB2YWxpZGF0aW9uID0gdmFsdWUubWF0Y2gocHJvdmlkZXIuaG9zdElucHV0VmFsaWRhdGlvbik7XG5cdFx0XHRpZiAodmFsaWRhdGlvbj09PW51bGxcblx0XHRcdFx0fHwgdmFsaWRhdGlvbi5sZW5ndGg9PT0wKXtcblx0XHRcdFx0cHJvdmlkZXIuJGFkZGl0aW9uYWxIb3N0SW5wdXQudHJhbnNpdGlvbignc2hha2UnKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoJChgLmhvc3Qtcm93W2RhdGEtdmFsdWU9XCIke3ZhbHVlfVwiXWApLmxlbmd0aD09PTApe1xuXHRcdFx0XHRjb25zdCAkdHIgPSAkKCcuaG9zdC1yb3ctdHBsJykubGFzdCgpO1xuXHRcdFx0XHRjb25zdCAkY2xvbmUgPSAkdHIuY2xvbmUodHJ1ZSk7XG5cdFx0XHRcdCRjbG9uZVxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcygnaG9zdC1yb3ctdHBsJylcblx0XHRcdFx0XHQuYWRkQ2xhc3MoJ2hvc3Qtcm93Jylcblx0XHRcdFx0XHQuc2hvdygpO1xuXHRcdFx0XHQkY2xvbmUuYXR0cignZGF0YS12YWx1ZScsIHZhbHVlKTtcblx0XHRcdFx0JGNsb25lLmZpbmQoJy5hZGRyZXNzJykuaHRtbCh2YWx1ZSk7XG5cdFx0XHRcdGlmICgkKHByb3ZpZGVyLmhvc3RSb3cpLmxhc3QoKS5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHQkdHIuYWZ0ZXIoJGNsb25lKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQkKHByb3ZpZGVyLmhvc3RSb3cpLmxhc3QoKS5hZnRlcigkY2xvbmUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHByb3ZpZGVyLnVwZGF0ZUhvc3RzVGFibGVWaWV3KCk7XG5cdFx0XHRcdHByb3ZpZGVyLiRkaXJydHlGaWVsZC52YWwoTWF0aC5yYW5kb20oKSk7XG5cdFx0XHRcdHByb3ZpZGVyLiRkaXJydHlGaWVsZC50cmlnZ2VyKCdjaGFuZ2UnKTtcblx0XHRcdH1cblx0XHRcdHByb3ZpZGVyLiRhZGRpdGlvbmFsSG9zdElucHV0LnZhbCgnJyk7XG5cdFx0fVxuXHR9LFxuXHQvKipcblx0ICogU2hvd3MgZHVtbXkgaWYgd2UgaGF2ZSB6ZXJvIHJvd3Ncblx0ICovXG5cdHVwZGF0ZUhvc3RzVGFibGVWaWV3KCkge1xuXHRcdGNvbnN0IGR1bW15ID0gYDx0ciBjbGFzcz1cImR1bW15XCI+PHRkIGNvbHNwYW49XCI0XCIgY2xhc3M9XCJjZW50ZXIgYWxpZ25lZFwiPiR7Z2xvYmFsVHJhbnNsYXRlLnByX05vQW55QWRkaXRpb25hbEhvc3RzfTwvdGQ+PC90cj5gO1xuXG5cdFx0aWYgKCQocHJvdmlkZXIuaG9zdFJvdykubGVuZ3RoID09PSAwKSB7XG5cdFx0XHQkKCcjYWRkaXRpb25hbC1ob3N0cy10YWJsZSB0Ym9keScpLmFwcGVuZChkdW1teSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCQoJyNhZGRpdGlvbmFsLWhvc3RzLXRhYmxlIHRib2R5IC5kdW1teScpLnJlbW92ZSgpO1xuXHRcdH1cblx0fSxcblx0Y2JCZWZvcmVTZW5kRm9ybShzZXR0aW5ncykge1xuXHRcdGNvbnN0IHJlc3VsdCA9IHNldHRpbmdzO1xuXHRcdHJlc3VsdC5kYXRhID0gcHJvdmlkZXIuJGZvcm1PYmouZm9ybSgnZ2V0IHZhbHVlcycpO1xuXG5cdFx0Y29uc3QgYXJyQWRkaXRpb25hbEhvc3RzID0gW107XG5cdFx0JChwcm92aWRlci5ob3N0Um93KS5lYWNoKChpbmRleCwgb2JqKSA9PiB7XG5cdFx0XHRpZiAoJChvYmopLmF0dHIoJ2RhdGEtdmFsdWUnKSkge1xuXHRcdFx0XHRhcnJBZGRpdGlvbmFsSG9zdHMucHVzaCh7XG5cdFx0XHRcdFx0YWRkcmVzczogJChvYmopLmF0dHIoJ2RhdGEtdmFsdWUnKSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmVzdWx0LmRhdGEuYWRkaXRpb25hbEhvc3RzID0gSlNPTi5zdHJpbmdpZnkoYXJyQWRkaXRpb25hbEhvc3RzKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LFxuXHRjYkFmdGVyU2VuZEZvcm0oKSB7XG5cblx0fSxcblx0aW5pdGlhbGl6ZUZvcm0oKSB7XG5cdFx0Rm9ybS4kZm9ybU9iaiA9IHByb3ZpZGVyLiRmb3JtT2JqO1xuXHRcdEZvcm0uJGZvcm1PYmouZm9ybS5zZXR0aW5ncy5ydWxlcy5jaGVja0hvc3RQcm92aWRlciA9ICh2YWx1ZSkgPT4ge1xuXHRcdFx0bGV0IGVuYWJsZTtcblx0XHRcdGlmKCQoJyNyZWdpc3RyYXRpb25fdHlwZScpLnZhbCgpID09PSAnaW5ib3VuZCcpe1xuXHRcdFx0XHRlbmFibGUgPSB0cnVlO1xuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdGVuYWJsZSA9IHZhbHVlLnRyaW0oKSAhPT0gJyc7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZW5hYmxlO1xuXHRcdH07XG5cdFx0c3dpdGNoIChwcm92aWRlci5wcm92aWRlclR5cGUpIHtcblx0XHRcdGNhc2UgJ1NJUCc6XG5cdFx0XHRcdEZvcm0udXJsID0gYCR7Z2xvYmFsUm9vdFVybH1wcm92aWRlcnMvc2F2ZS9zaXBgO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ0lBWCc6XG5cdFx0XHRcdEZvcm0udXJsID0gYCR7Z2xvYmFsUm9vdFVybH1wcm92aWRlcnMvc2F2ZS9pYXhgO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Rm9ybS52YWxpZGF0ZVJ1bGVzID0gcHJvdmlkZXIudmFsaWRhdGVSdWxlcztcblx0XHRGb3JtLmNiQmVmb3JlU2VuZEZvcm0gPSBwcm92aWRlci5jYkJlZm9yZVNlbmRGb3JtO1xuXHRcdEZvcm0uY2JBZnRlclNlbmRGb3JtID0gcHJvdmlkZXIuY2JBZnRlclNlbmRGb3JtO1xuXHRcdEZvcm0uaW5pdGlhbGl6ZSgpO1xuXHR9LFxufTtcblxuXG5cbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcblx0cHJvdmlkZXIuaW5pdGlhbGl6ZSgpO1xufSk7XG4iXX0=