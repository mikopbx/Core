#!/bin/sh
#
# MikoPBX - free phone system for small business
# Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.
#

MD5_BUILD_INFO=$(/bin/busybox md5sum /etc/version.buildtime 2>/dev/null | /bin/busybox cut -d ' ' -f 1 2>/dev/null);
PATH=/sbin:/bin:/usr/sbin:/usr/bin
export PATH

# Подключаем библиотеку функций.
. /sbin/shell_functions.sh;

createBootConfFiles()
{
  usrDir='/offload/rootfs/usr';

  rcDir="${usrDir}/www/src/Core/Rc";
  if [ -d "${rcDir}" ]; then
        echoToTeletype " - Create symlink for /etc/rc ..."
        rm -rf /etc/rc;
        ln -s "${rcDir}" /etc/rc;
  fi
  sleep 5;

  confFile="${usrDir}/www/config/mikopbx-settings.json";
  if [ -f "${confFile}" ]; then
        echoToTeletype " - Copy phalcon config file to /etc/inc ..."
        mkdir -p /etc/inc/;
        cp "$confFile" /etc/inc/;
  fi
}

checkOffloadDisk()
{
  CHECK_RESULT=0; # Все ок
  pathToFile="/offload/version.buildtime";
  if [ ! -f "${pathToFile}"  ] ; then
    echoToTeletype " - File ${pathToFile} not found";
    CHECK_RESULT=1; # Файл не существует.
	else
    md5OffloadBI=$(/bin/busybox md5sum $pathToFile 2>/dev/null | /bin/busybox cut -d ' ' -f 1 2>/dev/null);
    if [ ! "${md5OffloadBI}" = "${MD5_BUILD_INFO}" ] ; then
      CHECK_RESULT=2; # Хэш сумма не сходится.
      echoToTeletype " - Hash file ${pathToFile} verification failed";
   fi
	fi
}

mountoffload()
{
	disk="$1";
	uuid=$(/sbin/blkid -ofull "$disk" | /bin/busybox sed -r 's/[[:alnum:]]+=/\n&/g' | /bin/busybox grep "^UUID" | /bin/busybox cut -d '"' -f 2 | /bin/busybox head -n 1);
  type=$(/sbin/blkid -ofull "$disk" | /bin/busybox sed -r 's/[[:alnum:]]+=/\n&/g' | /bin/busybox grep "^TYPE="| /bin/busybox cut -d '"' -f 2 | /bin/busybox head -n 1);
	umount -f /offload 2> /dev/null
  # Проверка размера диска.
	size="$(/bin/lsblk "$disk" -P -o SIZE | cut -f 2 -d '"' | cut -f 1 -d 'M')";
  if [ "$size" -le 600 ]; then
    echo " - Start check: $disk";
    "/sbin/fsck.${type}" -f -p "$disk" > /dev/null 2> /dev/null;
  else
    MOUNT_RESULT='cannot be offload, large size';
    return;
  fi
	mount -t "${type}" -r UUID="$uuid" /offload 2> /dev/null;

  MOUNT_RESULT=$?;
  checkOffloadDisk;
  if [ ! "${CHECK_RESULT}" = "0" ] ; then
	  umount -f /offload 2> /dev/null
	  MOUNT_RESULT="${CHECK_RESULT}";
    sleep 1;
  fi
	createBootConfFiles
}

mountConfRecover()
{
	offloaddisk="$1";
	echoToTeletype " - Attempting to mount existing configuration..."
	
	# Создаем каталог для монтирования (старая конфигурация). 
	rec_dir='/conf.recover/';
	mkdir -p "${rec_dir}";
	
	# Получаем список дисков. 
	diskrs=$(/bin/lsblk -b -r -o NAME,TYPE  -n | /bin/busybox grep -e "disk$" -e 'raid'  | /bin/busybox cut -d ' ' -f 1 | /bin/busybox sort -u);
	for diskr in $diskrs
	do
	  disk3=$(/bin/lsblk -r | /bin/busybox grep "$(/bin/busybox basename "$diskr")" |  /bin/busybox cut -d ' ' -f 1 | /bin/busybox grep "3$" | /bin/busybox sort -u);
		if [ "${diskr}" = "${offloaddisk}" ]; then
			# Проверка на уже смонтированный диск.
			echoToTeletype " - Skip ${diskr}, already mount..."
			continue
		fi

		if [ ! -b "/dev/${disk3}" ]; then
			echoToTeletype " - Skip ${diskr}, part 3 not found..."
			continue
		fi;

	  type=$(/sbin/blkid -o full "/dev/${disk3}" | /bin/busybox sed -r 's/[[:alnum:]]+=/\n&/g' | /bin/busybox grep "^TYPE" | /bin/busybox cut -d '"' -f 2 | /bin/busybox head -n 1);
		if [ -f "/sbin/fsck.${type}" ]; then
		    "/sbin/fsck.${type}" -f -p "/dev/${disk3}" > /dev/null 2> /dev/null;
		    echoToTeletype " - Trying fsck /dev/${disk3} ... returned: $?"
		fi

    uuid=$(/sbin/blkid -o full "/dev/${disk3}" | /bin/busybox sed -r 's/[[:alnum:]]+=/\n&/g' | /bin/busybox grep "^UUID" | /bin/busybox cut -d '"' -f 2 | /bin/busybox head -n 1);
		mount -t "${type}" -r UUID="${uuid}" "${rec_dir}"
		echoToTeletype " - Trying mount ${diskr} fs ${type} ... returned: $?"
		if [ -d "${rec_dir}conf" ] && [ ! -f "${rec_dir}livecd"  ] ; then
			echoToTeletype " - Found existing configuration on ${disk3}!"
			exit 0
		else
			umount -f "${rec_dir}" > /dev/null 2> /dev/null;
			rm -rf "${rec_dir}";
		fi
	done
	
}

rm -rf /tmp/freeoffload;

################################################################################
# LIVE CD-ROM / LIVE USB
################################################################################
echoToTeletype " - Waiting for connect device....."
busybox sleep 4;

cddev=$(/bin/lsblk -b -d -r -o NAME,TYPE  -n | /bin/busybox grep "rom$" | /bin/busybox cut -d ' ' -f 1 |/bin/busybox uniq)
length=0
/sbin/blkid "/dev/${cddev}" > /dev/null 2>&1
blkResult="$?";
if [ "$blkResult" -eq 0 ]; then
	length=${#cddev}
fi
echoToTeletype " - Attempting to mount /boot partition..."
if [ "$length" -gt 2 ]; then
	disks=${cddev}
else
	disks=$(/bin/lsblk -b -d -r -o NAME,TYPE  -n | /bin/busybox grep "disk$" | /bin/busybox cut -d ' ' -f 1 |/bin/busybox uniq)
fi
for disk in $disks
do
	if [ "$length" -gt 2 ]; then
	  diskPath="/dev/${disk}";
	else
	  partitionName=$(/bin/lsblk -r | /bin/busybox grep "$(/bin/busybox basename "$disk")" |  /bin/busybox cut -d ' ' -f 1 | /bin/busybox grep "1$");
		diskPath="/dev/${partitionName}";
	fi

	if [ ! -b "$diskPath" ]; then
	    continue;
	fi
	mountoffload "$diskPath";

	echoToTeletype " - Trying ${disk} mount returned: $MOUNT_RESULT"
	if [ -f /offload/livecd ]; then
		echoToTeletype " - Found LIVECD flag file...";
		createBootConfFiles
		mountConfRecover "$disk";
		# Все, что необходимо было смонтировано. 
		exit 0
	fi
	umount -f /offload 2> /dev/null
done


################################################################################
# RAID
################################################################################

echoToTeletype
echoToTeletype " - Attempting to mount /offload partition..."
disks=$(/bin/lsblk -b -r -o NAME,TYPE  -n | /bin/busybox grep "raid" | /bin/busybox cut -d ' ' -f 1 | /bin/busybox sort -u)
for disk in $disks
do
	partitionName=$(/bin/lsblk -r | /bin/busybox grep "$(/bin/busybox basename "$disk")" |  /bin/busybox cut -d ' ' -f 1 | /bin/busybox grep "2$" | /bin/busybox sort -u);
	diskPath="/dev/${partitionName}";
	if [ ! -b "$diskPath" ]; then
	    continue;
	fi
	mountoffload "$diskPath";
	echoToTeletype " - Trying ${disk} mount returned: $MOUNT_RESULT"
	if [ -d /offload/rootfs ]; then
		echoToTeletype " - Found rootfs!"
		exit 0
	fi
	umount -f /offload > /dev/null
	echoToTeletype " - Failed to find rootfs!"
done

################################################################################
# HDD
################################################################################

echoToTeletype
echoToTeletype " - Attempting to mount /offload partition..."
disks=$(/bin/lsblk -b -d -r -o NAME,TYPE  -n | /bin/busybox grep "disk$" | /bin/busybox cut -d ' ' -f 1 |/bin/busybox uniq)
for disk in $disks
do
	partitionName=$(/bin/lsblk -r | /bin/busybox grep "$(/bin/busybox basename "$disk")" |  /bin/busybox cut -d ' ' -f 1 | /bin/busybox grep "2$");
	diskPath="/dev/${partitionName}";
	if [ ! -b "$diskPath" ]; then
	    continue;
	fi
	mountoffload "$diskPath";
	echoToTeletype " - Trying ${disk} mount returned: $MOUNT_RESULT"
	if [ -d /offload/rootfs ]; then
		echoToTeletype " - Found rootfs!"
		exit 0
	fi
	umount -f /offload > /dev/null
	echoToTeletype " - Failed to find rootfs!"
done

################################################################################
# USB 
################################################################################

echoToTeletype
echoToTeletype " - Waiting for disks to settle and trying again..."
/bin/busybox sleep 10

echoToTeletype " - checking for liveusb..."
echoToTeletype " - attempting to mount /boot partition..."
disks=$(/bin/lsblk -b -d -r -o NAME,TYPE  -n | /bin/busybox grep "disk$" | /bin/busybox cut -d ' ' -f 1 |/bin/busybox uniq)
for disk in $disks
do
	partitionName=$(/bin/lsblk -r | /bin/busybox grep "$(/bin/busybox basename "$disk")" |  /bin/busybox cut -d ' ' -f 1 | /bin/busybox grep "1$");
	diskPath="/dev/${partitionName}";
	if [ ! -b "$diskPath" ]; then
	    continue;
	fi
	mountoffload "$diskPath";

	echoToTeletype " - trying ${disk} mount returned: $MOUNT_RESULT"
	if [ -f /offload/livecd ]; then
		echoToTeletype " - found LIVE USB flag file...";
		mountConfRecover "$disk";
		exit 0
	fi
	umount -f /offload
done

echoToTeletype
for disk in $disks
do
	partitionName=$(/bin/lsblk -r | /bin/busybox grep "$(/bin/busybox basename "$disk")" |  /bin/busybox cut -d ' ' -f 1 | /bin/busybox grep "2$");
  diskPath="/dev/${partitionName}";
	if [ ! -b "$diskPath" ]; then
	    continue;
	fi
	mountoffload "$diskPath";

	echoToTeletype " - trying ${disk} mount returned: $MOUNT_RESULT"
	if [ -d /offload/rootfs ]; then
		echoToTeletype " - found rootfs!"
		exit 0
	fi
	echoToTeletype " - failed to find rootfs!"
done

echoToTeletype
echoToTeletype "The system was unable to find the /offload partition!"
echoToTeletype
echoToTeletype "Send in the output of (ls /dev) and (fdisk -l) to the"
echoToTeletype "development team to get this fixed."
echoToTeletype "Thanks...and sorry this is not already working better!"
echoToTeletype
echoToTeletype "Here's a prompt, see what you can see..."
exec /bin/sh

exit 1
