#!/usr/bin/php -f
<?php
/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

namespace MikoPBX\Core\Rc;
use Phalcon\Di;
use MikoPBX\Core\System\{Processes, Util, Storage};

require_once('Globals.php');

$NoCfDevice = <<<EOD

*******************************************************************************
* FATAL ERROR                                                                 *
* The device that contains the configuration file (mikopbx.db) could not be   *
* found. MikoPBX can not continue booting.                                     *
*******************************************************************************

EOD;

$phalconConfig  = Di::getDefault()->get('config');
$cfDir          = $phalconConfig->path('core.cfDir');
$varEtcDir      = $phalconConfig->path('core.varEtcDir');
$dbFile         = $phalconConfig->path('database.dbfile');
$mountPath      = Util::which('mount');
$unmountPath    = Util::which('umount');
$sqlite3Path    = Util::which('sqlite3');
$rmPath         = Util::which('rm');
$mvPath         = Util::which('mv');

$cfgdevice = '';
/* check if there's already an fstab (NFS booting?) */
if (file_exists('/etc/fstab')) {
    return; // Обработка не требуется.
}

if (file_exists('/offload/livecd')) {
    $d_path_info = pathinfo($dbFile);
    // Копируем файл базы данных настроек.
    copy('/offload/conf/mikopbx.db', $dbFile);
    Util::addRegularWWWRights($d_path_info);
    Util::addRegularWWWRights($dbFile);
    return; // Обработка не требуется.
}

$storage = new Storage();
/* iterate through the disks fdisk finds until one contains a mikopbx.db */
$attempts = 2;
while ($attempts--) {
    $disks = $storage->diskGetDevices(true);
    foreach ($disks as $disk => $diskInfo) {
        // RAID содержит вложенный массив "children"
        if(isset($diskInfo['children'][0]['children'])){
            $diskInfo = $diskInfo['children'][0];
            // Корректируем имя диска. это RAID.
            $disk     = $diskInfo['name'];
        }
        $children = $diskInfo['children'];
        if(count($children)<3){
            // Диск интересен только если содержит 3 и более раздела.
            continue;
        }
        echo "\n - Found disk: {$disk}\n";
        echo " - Looking for configuration on: $disk\n";
        $partName   = $children[2]['name']??'';
        $fsType     = $children[2]['fstype']??'';
        $uuid       = $children[2]['uuid']??'';
        if(empty($uuid) || empty($fsType)){
            continue;
        }
        // Запустим проверку раздела диска
        $fsckPath = Util::which("fsck.{$fsType}");
        // Проверка диска на ошлибки.
        Processes::mwExec("if [ -b /dev/{$partName} ]; then {$fsckPath} -f -p /dev/{$partName}; fi;");
        // Монртируем диск.
        $resultMount = Processes::mwExec("{$mountPath} -t {$fsType} -rw UUID=\"{$uuid}\" {$cfDir}");
        if ($resultMount !== 0) {
            // Ошибка монтирования.
            continue;
        }

        if (file_exists($dbFile) && filesize($dbFile) > 0) {
            $cfgdevice    = $disk;
            echo " - Found configuration on $partName.\n";
            $old_db_name = '/cf/conf/mikozia.db';
            if (file_exists($old_db_name)) {
                @unlink($dbFile);
                @rename($old_db_name, $dbFile);
            }
            if (Processes::mwExec("{$sqlite3Path} {$dbFile} 'VACUUM'") !== 0) {
                $tmp_name = '/tmp/' . time() . '.db.dmp';
                Processes::mwExec("{$sqlite3Path} {$dbFile} .dump | {$sqlite3Path} {$tmp_name}");
                Processes::mwExec("{$rmPath} {$dbFile}*");
                Processes::mwExec("{$mvPath} {$tmp_name} {$dbFile}");
            }
            // Диск найден и смонтирован, выходим из цикла.
            break;
        }
        Processes::mwExec("{$unmountPath} -f /dev/{$partName}");
    }

    if ($cfgdevice) {
        break;
    }
    if ($attempts) {
        echo " - Configuration not found.\n";
        echo " - Waiting for devices to settle and attempting again.\n";
        sleep(3);
    }
}

if ( ! $cfgdevice) {
    /* no device found, print an error and die */
    echo $NoCfDevice;
    sleep(5);
    $haltPath = Util::which('halt');
    Processes::mwExec($haltPath);
} else {
    // Запишем в файл имя подключенного устройства.
    file_put_contents("{$varEtcDir}/cfdevice", $cfgdevice);
}
