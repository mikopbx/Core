#!/usr/bin/php -f
<?php
/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

use MikoPBX\Core\System\Network;
use MikoPBX\Core\System\Util;
use MikoPBX\Core\System\CloudProvisioning;

require_once 'Globals.php';

/**
 * Get the action parameter from the command line arguments and convert it to lowercase.
 */
$action  = strtolower(trim($argv[1]));

/**
 * Create a new instance of the Network class.
 */
$network = new Network();

/**
 * Check if running inside a Docker container.
 * If true, skip the action and exit the script.
 */
if(Util::isDocker()){
    Util::sysLogMsg(basename(__FILE__), "Skipped action {$action}... because of docker", LOG_DEBUG);
    exit(0);
} else {
    Util::sysLogMsg(basename(__FILE__), "Starting action {$action}...", LOG_DEBUG);
}

if ($action === 'deconfig' && Util::isT2SdeLinux()) {
    /**
     * Perform deconfiguration for T2SDE Linux.
     */

    $network->udhcpcConfigureDeconfig();
} elseif ('bound' === $action || 'renew' === $action) {
    if (Util::isSystemctl()) {
        /**
         * Perform configuration renewal and bound actions using systemctl (systemd-based systems).
         */
        $network->udhcpcConfigureRenewBoundSystemCtl();
    } elseif (Util::isT2SdeLinux()) {
        /**
         * Perform configuration renewal and bound actions for T2SDE Linux.
         */
        $network->udhcpcConfigureRenewBound();
    }

    /**
     * Start the cloud provisioning process.
     */
    CloudProvisioning::start();
}