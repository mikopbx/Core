<?php
/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

namespace MikoPBX\Core\Rc;

use Phalcon\Di;
use MikoPBX\Core\System\{Processes, Util, Storage, System, MikoPBXConfig};
require_once('Globals.php');

$fp = fopen('php://stdin', 'rb');
$storage = new Storage();

$valid_disks = [];
$selected_disk = ['size' => 0, 'id' => ''];
$all_hdd = $storage->getAllHdd();
foreach ($all_hdd as $disk) {
    $other_info = '';
    if(true === $disk['sys_disk']){
        $other_info.=' System Disk ';
    }
    if(true === $disk['mounted']){
        $other_info.=' Mounted ';
    }
    if($other_info !== ''){
        $other_info = "[ \033[31;1m{$other_info}\033[0m ]";
    }
    if($selected_disk['size'] === 0 || $selected_disk['size'] > $disk['size'] ){
        $selected_disk = $disk;
    }
    if($disk['size'] < 400){
        continue;
    }

    $valid_disks[$disk['id']] = "  - {$disk['id']}, {$disk['size_text']}, {$disk['vendor']} $other_info \n";
}

if(count($valid_disks) === 0){
    echo "\n ".Util::translate('Valid disks not found...')." \n";
    sleep(3);
    return 0;
}

echo "\n ".Util::translate('Select the drive to install the system.').' ';
echo "\n ".Util::translate('Selected disk:')."\033[33;1m [{$selected_disk['id']}] \033[0m \n\n";
echo "\n ".Util::translate('Valid disks are:')." \n\n";
foreach ($valid_disks as $disk) {
    echo $disk;
}
echo "\n";
do {
    echo "\n".Util::translate('Enter the device name:').Util::translate('(default value = ').$selected_disk['id'].') :';
    $target_disk = trim(fgets($fp));
    if ($target_disk === '') {
        $target_disk = $selected_disk['id'];
    }
} while (!array_key_exists($target_disk, $valid_disks));

echo '

*******************************************************************************
* '.Util::translate('WARNING').'!                                                                    
* '.Util::translate('The PBX is about to be installed onto the')." \033[33;1m{$target_disk}\033[0m.
* - ".Util::translate('everything on this device will be erased!').'                                 
* - '.Util::translate('this cannot be undone!').'                                                    
*******************************************************************************

'.Util::translate('The PBX will reboot after installation.').'

'.Util::translate('Do you want to proceed? (y/n): ');

if (strtolower(trim(fgets($fp)) ) !== 'y') {
    // Сохраним информацию о системном диске во временный файл.

    sleep(3);
    exit(0);
}

$config = Di::getDefault()->getConfig();
$varEtcDir = $config->path('core.varEtcDir');
file_put_contents($varEtcDir.'/cfdevice', $target_disk);

echo "Installing PBX...\n";
$mountPath = Util::which('mount');
$grepPath = Util::which('grep');
$busyboxPath = Util::which('busybox');
$awkPath = Util::which('awk');
$umountPath = Util::which('umount');

// Получим все смонтированные разделы:
$mnt_dirs = [];
Processes::mwExec("{$mountPath} | {$grepPath} '^/dev/{$target_disk}' | {$busyboxPath} {$awkPath} '{print $3}'",$mnt_dirs);
foreach ($mnt_dirs as $mnt){
    // Завершаем все связанные процессы.
    Processes::mwExec("/sbin/shell_functions.sh killprocesses '$mnt' -TERM 0;");
    // Отмонтируем.
    Processes::mwExec("{$umountPath} {$mnt}");
}
echo " - Unpacking img...\n";
$pvPath = Util::which('pv');
$ddPath = Util::which('dd');
$gunzipPath = Util::which('gunzip');

$install_cmd =  'exec < /dev/console > /dev/console 2>/dev/console;'.
    "{$pvPath} -p /offload/firmware.img.gz | {$gunzipPath} | {$ddPath} of=/dev/{$target_disk} bs=512 2> /dev/null";
passthru($install_cmd);
echo " - Create storage partition...\n";
passthru("exec </dev/console >/dev/console 2>/dev/console; /sbin/initial.storage.part.four create /dev/{$target_disk}");
// Подключение диска для хранения данных.
include '/etc/rc/connect.storage';

// Бекапим таблицу с информацией по дискам.
echo 'Copying configuration...';
Util::mwMkdir('/mnttmp');

$partName = Storage::getDevPartName("/dev/{$target_disk}", '3');
/** Монтируем диск с настройками */
Processes::mwExec("{$mountPath} -w -o noatime /dev/{$partName} /mnttmp");

$mikoPBXconfig = new MikoPBXConfig();
$lang = $mikoPBXconfig->getGeneralSettings('SSHLanguage');

$filename       = $config->path('database.dbfile');
$result_db_file = '/mnttmp/conf/mikopbx.db';
/** Копируем файл базы данных настроек. */
$cpPath      = Util::which('cp');
$sqlite3Path = Util::which('sqlite3');
$grepPath = Util::which('grep');
$dmpDbFile   = tempnam('/tmp', 'storage');
// Сохраняем дамп настроек.
$tables = ['m_Storage', 'm_LanInterfaces'];
$grepOptions = '';
foreach ($tables as $table){
    $grepOptions.=" -e '^INSERT INTO {$table}'";
    $grepOptions.=" -e '^INSERT INTO \"{$table}'";
}
system("{$sqlite3Path} {$filename} .dump | {$grepPath} {$grepOptions} > ". $dmpDbFile);
// Если выбран другой язык - используем другой файл настроек.
$filename_lang  = "/offload/conf/mikopbx-{$lang}.db";
if($lang !== 'en' && file_exists($filename_lang)){
    $filename = $filename_lang;
}
// Заменяем файл настроек.
Processes::mwExec("{$cpPath} {$filename} {$result_db_file}");
system("{$sqlite3Path} {$result_db_file} 'DELETE FROM m_Storage'");
system("{$sqlite3Path} {$result_db_file} 'DELETE FROM m_LanInterfaces'");
// Восстанавливаем настройки из файла бекапа.
system("{$sqlite3Path} {$result_db_file} < {$dmpDbFile}");
unlink($dmpDbFile);
// Фиксируем флаг необходимости очистки кэш web.
Processes::mwExec("{$umountPath} /mnttmp");
echo "done\n";
// Фиксируем флаг необходимости вынуить CD диск.
file_put_contents('/tmp/ejectcd','');
System::rebootSync();